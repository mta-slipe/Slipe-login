-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientGui
local SystemNumerics
local SystemWindowsControls
local SystemWindowsMedia
local WpfRendererCegui
System.import(function (out)
  SlipeClientGui = Slipe.Client.Gui
  SystemNumerics = System.Numerics
  SystemWindowsControls = System.Windows.Controls
  SystemWindowsMedia = System.Windows.Media
  WpfRendererCegui = WpfRenderer.Cegui
end)
System.namespace("WpfRenderer.Cegui.Elements", function (namespace)
  namespace.class("WpfGuiRadioButton", function (namespace)
    local UpdateIsChecked, __ctor__
    __ctor__ = function (this, button, parent)
      SlipeClientGui.RadioButton.__ctor__[2](this, SystemNumerics.Vector2(System.ToSingle(button:getMargin():getLeft()), System.ToSingle(button:getMargin():getTop())), SystemNumerics.Vector2(System.ToSingle(button:getWidth()), System.ToSingle(button:getHeight())), System.cast(System.String, button:getContent()), false, parent)
      WpfRendererCegui.GuiWpfHelper.AttachHandlers(this, button)

      this.OnClick = this.OnClick + function (source, args)
        if button:getIsChecked() == this:getSelected() then
          return
        end
        button:setIsChecked(this:getSelected())

        if button.Checked then
            button:Checked(this, System.Windows.RoutedEventArgs());
        end

        local childCount = SystemWindowsMedia.VisualTreeHelper.GetChildrenCount(button:getParent())
        for i = 0, childCount - 1 do
          local radioButton = System.as(SystemWindowsMedia.VisualTreeHelper.GetChild(button:getParent(), i), SystemWindowsControls.RadioButton)
          if radioButton ~= nil and radioButton ~= button then
            radioButton:setIsChecked(false)
            if radioButton.Checked then
                radioButton:Checked(this, System.Windows.RoutedEventArgs());
            end
          end
        end
      end

      button:addIsCheckedChanged(System.fn(this, UpdateIsChecked))
    end
    UpdateIsChecked = function (this, isChecked)
      if this:getSelected() ~= isChecked then
        this:setSelected(isChecked)
      end
    end
    return {
      __inherits__ = function (out)
        return {
          out.Slipe.Client.Gui.RadioButton
        }
      end,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          methods = {
            { ".ctor", 0x206, nil, System.Windows.Controls.RadioButton, out.Slipe.Client.Gui.GuiElement },
            { "UpdateIsChecked", 0x101, UpdateIsChecked, System.Boolean }
          },
          class = { 0x4 }
        }
      end
    }
  end)
end)

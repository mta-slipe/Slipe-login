-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeSharedVehicles
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedVehicles = Slipe.Shared.Vehicles
end)
System.namespace("Slipe.Server.Vehicles", function (namespace)
  -- <summary>
  -- Represents the set of all sirens on a vehicle
  -- </summary>
  namespace.class("Sirens", function (namespace)
    local getType1, setType1, getVisibleFromAllDirections1, setVisibleFromAllDirections1, getCheckLineOfSight1, setCheckLineOfSight1, getUseRandomiser1, setUseRandomiser1, 
    getSilent1, setSilent1, getOn1, setOn1, Add, Reinitialize, __ctor__
    -- <summary>
    -- Create a sirens set attached to a vehicle
    -- </summary>
    __ctor__ = function (this, vehicle)
      SlipeSharedVehicles.SharedSirens.__ctor__(this, vehicle)
      this.type = 3 --[[SirenType.dual]]
      this.checkLOS = true
      this.useRandomiser = false
      this.initialized = false
      this.count = 1
    end
    getType1 = function (this)
      return this.type
    end
    setType1 = function (this, value)
      this.type = value
      Reinitialize(this)
    end
    getVisibleFromAllDirections1 = function (this)
      return this.visibleFromAllDirection
    end
    setVisibleFromAllDirections1 = function (this, value)
      this.visibleFromAllDirection = value
      Reinitialize(this)
    end
    getCheckLineOfSight1 = function (this)
      return this.checkLOS
    end
    setCheckLineOfSight1 = function (this, value)
      this.checkLOS = value
      Reinitialize(this)
    end
    getUseRandomiser1 = function (this)
      return this.useRandomiser
    end
    setUseRandomiser1 = function (this, value)
      this.useRandomiser = value
      Reinitialize(this)
    end
    getSilent1 = function (this)
      return this.silent
    end
    setSilent1 = function (this, value)
      this.silent = value
      Reinitialize(this)
    end
    getOn1 = function (this)
      return SlipeMtaDefinitions.MtaShared.GetVehicleSirensOn(this.vehicle:getMTAElement())
    end
    setOn1 = function (this, value)
      -- This is due to an MTA bug not turning on silent sirens that are off
      SlipeMtaDefinitions.MtaShared.SetVehicleSirensOn(this.vehicle:getMTAElement(), false)
      SlipeMtaDefinitions.MtaShared.SetVehicleSirensOn(this.vehicle:getMTAElement(), value)
    end
    -- <summary>
    -- Add an individual siren point, returns false if the maximum amount of sirens is reached
    -- </summary>
    Add = function (this, position, color, minAlpha)
      if not this.initialized then
        Reinitialize(this)
      end

      if this.count < 8 then
        SlipeSharedVehicles.Siren(this.vehicle, this.count, position:__clone__(), color, minAlpha, true)
        this.count = this.count + 1
        return true
      end
      return false
    end
    Reinitialize = function (this)
      this.initialized = SlipeMtaDefinitions.MtaServer.AddVehicleSirens(this.vehicle:getMTAElement(), this.count, this.type, this.visibleFromAllDirection, this.checkLOS, this.useRandomiser, this.silent)
      return this.initialized
    end
    return {
      __inherits__ = function (out)
        return {
          out.Slipe.Shared.Vehicles.SharedSirens
        }
      end,
      initialized = false,
      count = 0,
      getType1 = getType1,
      setType1 = setType1,
      getVisibleFromAllDirections1 = getVisibleFromAllDirections1,
      setVisibleFromAllDirections1 = setVisibleFromAllDirections1,
      getCheckLineOfSight1 = getCheckLineOfSight1,
      setCheckLineOfSight1 = setCheckLineOfSight1,
      getUseRandomiser1 = getUseRandomiser1,
      setUseRandomiser1 = setUseRandomiser1,
      getSilent1 = getSilent1,
      setSilent1 = setSilent1,
      getOn1 = getOn1,
      setOn1 = setOn1,
      Add = Add,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "count", 0x1, System.Int32 },
            { "initialized", 0x1, System.Boolean }
          },
          properties = {
            { "CheckLineOfSight", 0x106, System.Boolean, getCheckLineOfSight1, setCheckLineOfSight1 },
            { "On", 0x106, System.Boolean, getOn1, setOn1 },
            { "Silent", 0x106, System.Boolean, getSilent1, setSilent1 },
            { "Type", 0x106, System.Int32, getType1, setType1 },
            { "UseRandomiser", 0x106, System.Boolean, getUseRandomiser1, setUseRandomiser1 },
            { "VisibleFromAllDirections", 0x106, System.Boolean, getVisibleFromAllDirections1, setVisibleFromAllDirections1 }
          },
          methods = {
            { ".ctor", 0x106, nil, out.Slipe.Shared.Vehicles.SharedVehicle },
            { "Add", 0x386, Add, System.Numerics.Vector3, out.Slipe.Shared.Utilities.Color, System.Single, System.Boolean },
            { "Reinitialize", 0x81, Reinitialize, System.Boolean }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)

-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeSharedElements
local SlipeSharedUtilities
local SystemNumerics
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedElements = Slipe.Shared.Elements
  SlipeSharedUtilities = Slipe.Shared.Utilities
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Server.Rendering", function (namespace)
  -- <summary>
  -- The camera object attached to a player
  -- </summary>
  namespace.class("Camera", function (namespace)
    local getTarget, setTarget, getInterior, setInterior, SetMatrix, SetMatrix1, GetFullCameraMatrix, GetCameraMatrix, 
    Fade, Fade1, __ctor__
    -- <summary>
    -- Creates a new camera instance from a player
    -- </summary>
    __ctor__ = function (this, player)
      this.player = player
    end
    getTarget = function (this)
      return SlipeSharedElements.ElementManager.getInstance():GetElement(SlipeMtaDefinitions.MtaServer.GetCameraTarget(this.player:getMTAElement()), SlipeSharedElements.PhysicalElement)
    end
    setTarget = function (this, value)
      SlipeMtaDefinitions.MtaServer.SetCameraTarget(this.player:getMTAElement(), value:getMTAElement())
    end
    getInterior = function (this)
      return SlipeMtaDefinitions.MtaServer.GetCameraInterior(this.player:getMTAElement())
    end
    setInterior = function (this, value)
      SlipeMtaDefinitions.MtaServer.SetCameraInterior(this.player:getMTAElement(), value)
    end
    -- <summary>
    -- Sets the matrix of this camera using a 4x4 matrix, roll and field of view
    -- </summary>
    SetMatrix = function (this, matrix, roll, fov)
      System.throw(System.NotImplementedException())

      --Vector3 translation = matrix.Translation;
      --Vector3 forward = matrix.Forward;
      --Vector3 lookAt = translation + forward;

      --return MTAServer.SetCameraMatrix(player.MTAElement, translation.X, translation.Y, translation.Z, lookAt.X, lookAt.Y, lookAt.Z, roll, fov);
    end
    -- <summary>
    -- Sets the matrix of this camera using two vectors, roll and field of view
    -- </summary>
    SetMatrix1 = function (this, position, lookAt, roll, fov)
      return SlipeMtaDefinitions.MtaServer.SetCameraMatrix(this.player:getMTAElement(), position.X, position.Y, position.Z, lookAt.X, lookAt.Y, lookAt.Z, roll, fov)
    end
    -- <summary>
    -- Retrieve the position, lookat, roll and field of view of a camera
    -- </summary>
    GetFullCameraMatrix = function (this)
      local result = SlipeMtaDefinitions.MtaServer.GetCameraMatrix(this.player:getMTAElement())
      local position = SystemNumerics.Vector3(result[1], result[2], result[3])
      local rotation = SystemNumerics.Vector3(result[4], result[5], result[6])
      local roll = result[7]
      local yaw = result:getRest()
      return System.tuple(position, rotation, roll, yaw)
    end
    -- <summary>
    -- Retrieves the 4x4matrix of this camera
    -- </summary>
    GetCameraMatrix = function (this)
      System.throw(System.NotImplementedException())

      --Tuple<float, float, float, float, float, float, float, float> result = MTAServer.GetCameraMatrix(player.MTAElement);
      --Vector3 position = new Vector3(result.Item1, result.Item2, result.Item3);
      --Vector3 rotation = new Vector3(result.Item4, result.Item5, result.Item6);
      --float roll = result.Item7;
      --float yaw = result.Rest;
      --return Matrix4x
    end
    -- <summary>
    -- Fade the camera to a specific color in a certain time
    -- </summary>
    Fade = function (this, fade, color, time)
      return SlipeMtaDefinitions.MtaServer.FadeCamera(this.player:getMTAElement(), fade == 0 --[[CameraFade.In]] and true or false, System.div(time, 1000), color:getR(), color:getG(), color:getB())
    end
    -- <summary>
    -- Fade to black \m/
    -- </summary>
    Fade1 = function (this, fade)
      return Fade(this, fade, SlipeSharedUtilities.Color(0x000000), 1000)
    end
    return {
      getTarget = getTarget,
      setTarget = setTarget,
      getInterior = getInterior,
      setInterior = setInterior,
      SetMatrix = SetMatrix,
      SetMatrix1 = SetMatrix1,
      GetFullCameraMatrix = GetFullCameraMatrix,
      GetCameraMatrix = GetCameraMatrix,
      Fade = Fade,
      Fade1 = Fade1,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "player", 0x1, out.Slipe.Server.Peds.Player }
          },
          methods = {
            { ".ctor", 0x106, nil, out.Slipe.Server.Peds.Player },
            { "Fade", 0x386, Fade, System.Int32, out.Slipe.Shared.Utilities.Color, System.Int32, System.Boolean },
            { "Fade", 0x186, Fade1, System.Int32, System.Boolean },
            { "GetCameraMatrix", 0x86, GetCameraMatrix, System.Numerics.Matrix4x4 },
            { "GetFullCameraMatrix", 0x86, GetFullCameraMatrix, System.Tuple },
            { "SetMatrix", 0x386, SetMatrix, System.Numerics.Matrix4x4, System.Single, System.Single, System.Boolean },
            { "SetMatrix", 0x486, SetMatrix1, System.Numerics.Vector3, System.Numerics.Vector3, System.Single, System.Single, System.Boolean }
          },
          properties = {
            { "Interior", 0x106, System.Int32, getInterior, setInterior },
            { "Target", 0x106, out.Slipe.Shared.Elements.PhysicalElement, getTarget, setTarget }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)

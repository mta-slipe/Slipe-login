-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeServerPeds
local SlipeSharedElements
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeServerPeds = Slipe.Server.Peds
  SlipeSharedElements = Slipe.Shared.Elements
end)
System.namespace("Slipe.Server.IO", function (namespace)
  -- <summary>
  -- Represents a single command handler
  -- </summary>
  namespace.class("CommandHandler", function (namespace)
    local CommandHandlerCallback, Execute, Execute1, __ctor1__, __ctor2__
    -- <summary>
    -- Adds a command handler to be used by players
    -- </summary>
    -- <param name="callback"></param>
    -- <param name="restricted"></param>
    -- <param name="caseSensitive"></param>
    __ctor1__ = function (this, command, callback, restricted, caseSensitive)
      this.command = command
      this.callback = callback
      SlipeMtaDefinitions.MtaServer.AddCommandHandler(command, System.fn(this, CommandHandlerCallback), restricted, caseSensitive)
    end
    -- <summary>
    -- Adds a command handler to be used by the console
    -- </summary>
    -- <param name="consoleCallback"></param>
    -- <param name="restricted"></param>
    -- <param name="caseSensitive"></param>
    __ctor2__ = function (this, command, consoleCallback, restricted, caseSensitive)
      this.consoleCallback = consoleCallback
      SlipeMtaDefinitions.MtaServer.AddCommandHandler(command, System.fn(this, CommandHandlerCallback), restricted, caseSensitive)
    end
    CommandHandlerCallback = function (this, element, command, parameters)
      if SlipeMtaDefinitions.MtaShared.GetElementType(element) == "console" then
        local default = this.consoleCallback
        if default ~= nil then
          default(command, parameters)
        end
      else
        local default = this.callback
        if default ~= nil then
          local extern
          if element == nil then
            extern = nil
          else
            extern = SlipeSharedElements.ElementManager.getInstance():GetElement(element, SlipeServerPeds.Player)
          end
          default(extern, command, parameters)
        end
      end
    end
    -- <summary>
    -- Executes the command handler in name of the player
    -- </summary>
    -- <param name="args"></param>
    Execute = function (this, player, args)
      SlipeMtaDefinitions.MtaServer.ExecuteCommandHandler(this.command, player:getMTAElement(), System.String.JoinParams(" ", args))
    end
    -- <summary>
    -- Executes the command handler in name of the player
    -- </summary>
    -- <param name="command"></param>
    -- <param name="args"></param>
    Execute1 = function (player, command, args)
      SlipeMtaDefinitions.MtaServer.ExecuteCommandHandler(command, player:getMTAElement(), System.String.JoinParams(" ", args))
    end
    return {
      Execute = Execute,
      Execute1 = Execute1,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "callback", 0x1, System.Delegate(out.Slipe.Server.Peds.Player, System.String, System.Array(System.String), System.Void) },
            { "command", 0x1, System.String },
            { "consoleCallback", 0x1, System.Delegate(System.String, System.Array(System.String), System.Void) }
          },
          methods = {
            { ".ctor", 0x406, __ctor1__, System.String, System.Delegate(out.Slipe.Server.Peds.Player, System.String, System.Array(System.String), System.Void), System.Boolean, System.Boolean },
            { ".ctor", 0x406, __ctor2__, System.String, System.Delegate(System.String, System.Array(System.String), System.Void), System.Boolean, System.Boolean },
            { "CommandHandlerCallback", 0x301, CommandHandlerCallback, out.Slipe.MtaDefinitions.MtaElement, System.String, System.Array(System.String) },
            { "Execute", 0x206, Execute, out.Slipe.Server.Peds.Player, System.Array(System.String) },
            { "Execute", 0x30E, Execute1, out.Slipe.Server.Peds.Player, System.String, System.Array(System.String) }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)

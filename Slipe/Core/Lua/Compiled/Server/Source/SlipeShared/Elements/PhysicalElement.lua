-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeCollisionShapes
local SlipeSharedElements
local SlipeSharedHelpers
local SystemNumerics
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeCollisionShapes = Slipe.Shared.CollisionShapes
  SlipeSharedElements = Slipe.Shared.Elements
  SlipeSharedHelpers = Slipe.Shared.Helpers
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Shared.Elements", function (namespace)
  -- <summary>
  -- Represents a physical element in the GTA world
  -- </summary>
  namespace.class("PhysicalElement", function (namespace)
    local getDimension, setDimension, getInterior, setInterior, getFrozen, setFrozen, getAlpha, setAlpha, 
    getHealth, setHealth, getModel, setModel, getCollisionShape, getCollisionsEnabled, setCollisionsEnabled, getLowLODElement, 
    setLowLODElement, getDoubleSided, setDoubleSided, getIsInWater, getIsLowLOD, getPosition, setPosition, getRotation, 
    setRotation, getQuaternionRotation, setQuaternionRotation, getMatrix, setMatrix, getForwardVector, getRightVector, getUpVector, 
    getVelocity, setVelocity, getAngularVelocity, setAngularVelocity, getAngularQuaternionVelocity, setAngularQuaternionVelocity, getToAttached, getIsAttached, 
    IsWithinCollisionShape, IsWithinMarker, AttachTo, AttachTo1, AttachTo2, AttachTo3, Detach, getOffset, 
    setOffset, GetWithinRange, FaceElement, class, __ctor__
    __ctor__ = function (this, mtaElement)
      SlipeSharedElements.Element.__ctor__[2](this, mtaElement)
    end
    getDimension = function (this)
      return SlipeMtaDefinitions.MtaShared.GetElementDimension(this.element)
    end
    setDimension = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementDimension(this.element, value)
    end
    getInterior = function (this)
      return SlipeMtaDefinitions.MtaShared.GetElementInterior(this.element)
    end
    setInterior = function (this, value)
      local position = getPosition(this)
      SlipeMtaDefinitions.MtaShared.SetElementInterior(this.element, value, position.X, position.Y, position.Z)
    end
    getFrozen = function (this)
      return SlipeMtaDefinitions.MtaShared.IsElementFrozen(this.element)
    end
    setFrozen = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementFrozen(this.element, value)
    end
    getAlpha = function (this)
      return SlipeMtaDefinitions.MtaShared.GetElementAlpha(this.element)
    end
    setAlpha = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementAlpha(this.element, value)
    end
    getHealth = function (this)
      return SlipeMtaDefinitions.MtaShared.GetElementHealth(this.element)
    end
    setHealth = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementHealth(this.element, value)
    end
    getModel = function (this)
      return SlipeMtaDefinitions.MtaShared.GetElementModel(this.element)
    end
    setModel = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementModel(this.element, value)
    end
    getCollisionShape = function (this)
      return SlipeSharedElements.ElementManager.getInstance():GetElement(SlipeMtaDefinitions.MtaShared.GetElementColShape(this.element), SlipeCollisionShapes.CollisionShape)
    end
    getCollisionsEnabled = function (this)
      return SlipeMtaDefinitions.MtaShared.GetElementCollisionsEnabled(this.element)
    end
    setCollisionsEnabled = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementCollisionsEnabled(this.element, value)
    end
    getLowLODElement = function (this)
      return SlipeSharedElements.ElementManager.getInstance():GetElement(SlipeMtaDefinitions.MtaShared.GetLowLODElement(this.element), class)
    end
    setLowLODElement = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetLowLODElement(this.element, value:getMTAElement())
    end
    getDoubleSided = function (this)
      return SlipeMtaDefinitions.MtaShared.IsElementDoubleSided(this.element)
    end
    setDoubleSided = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementDoubleSided(this.element, value)
    end
    getIsInWater = function (this)
      return SlipeMtaDefinitions.MtaShared.IsElementInWater(this.element)
    end
    getIsLowLOD = function (this)
      return SlipeMtaDefinitions.MtaShared.IsElementLowLOD(this.element)
    end
    getPosition = function (this)
      local position = SlipeMtaDefinitions.MtaShared.GetElementPosition(this.element)
      return SystemNumerics.Vector3(position[1], position[2], position[3])
    end
    setPosition = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementPosition(this.element, value.X, value.Y, value.Z, false)
    end
    getRotation = function (this)
      local rotation = SlipeMtaDefinitions.MtaShared.GetElementRotation(this.element, "default")
      return SystemNumerics.Vector3(rotation[1], rotation[2], rotation[3])
    end
    setRotation = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementRotation(this.element, value.X, value.Y, value.Z, "default", true)
    end
    getQuaternionRotation = function (this)
      return SlipeSharedHelpers.NumericHelper.EulerToQuaternion(getRotation(this))
    end
    setQuaternionRotation = function (this, value)
      setRotation(this, SlipeSharedHelpers.NumericHelper.QuaternionToEuler(value:__clone__()))
    end
    getMatrix = function (this)
      local matrix = SlipeMtaDefinitions.MtaShared.GetElementMatrix(this.element, false)
      return SystemNumerics.Matrix4x4(matrix[1][1], matrix[1][2], matrix[1][3], matrix[1][4], matrix[2][1], matrix[2][2], matrix[2][3], matrix[2][4], matrix[3][1], matrix[3][2], matrix[3][3], matrix[3][4], matrix[4][1], matrix[4][2], matrix[4][3], matrix[4][4])
    end
    setMatrix = function (this, value)
      setPosition(this, SystemNumerics.Vector3(value.M41, value.M42, value.M43))
      setQuaternionRotation(this, SystemNumerics.Quaternion.CreateFromRotationMatrix(value))
    end
    getForwardVector = function (this)
      local m = getMatrix(this)
      return SystemNumerics.Vector3(m.M21, m.M22, m.M23)
    end
    getRightVector = function (this)
      local m = getMatrix(this)
      return SystemNumerics.Vector3(m.M11, m.M12, m.M13)
    end
    getUpVector = function (this)
      local m = getMatrix(this)
      return SystemNumerics.Vector3(m.M31, m.M32, m.M33)
    end
    getVelocity = function (this)
      local velocity = SlipeMtaDefinitions.MtaShared.GetElementVelocity(this.element)
      return SystemNumerics.Vector3(velocity[1], velocity[2], velocity[3])
    end
    setVelocity = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementVelocity(this.element, value.X, value.Y, value.Z)
    end
    getAngularVelocity = function (this)
      local velocity = SlipeMtaDefinitions.MtaShared.GetElementAngularVelocity(this.element)
      return SystemNumerics.Vector3(velocity[1], velocity[2], velocity[3])
    end
    setAngularVelocity = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetElementAngularVelocity(this.element, value.X, value.Y, value.Z)
    end
    getAngularQuaternionVelocity = function (this)
      return SlipeSharedHelpers.NumericHelper.EulerToQuaternion(getAngularVelocity(this))
    end
    setAngularQuaternionVelocity = function (this, value)
      setAngularVelocity(this, SlipeSharedHelpers.NumericHelper.QuaternionToEuler(value:__clone__()))
    end
    getToAttached = function (this)
      return SlipeSharedElements.ElementManager.getInstance():GetElement(SlipeMtaDefinitions.MtaShared.GetElementAttachedTo(this.element), class)
    end
    getIsAttached = function (this)
      return SlipeMtaDefinitions.MtaShared.IsElementAttached(this.element)
    end
    -- <summary>
    -- This function is used to determine if an element is within a collision shape
    -- Please note that this function doesn't verify whether element is in the same dimension and interior, additional checks could be implemented manually if they are needed.
    -- </summary>
    IsWithinCollisionShape = function (this, collisionShape)
      return SlipeMtaDefinitions.MtaShared.IsElementWithinColShape(this.element, collisionShape:getMTAElement())
    end
    -- <summary>
    -- This function is used to determine if this element is within a marker.
    -- </summary>
    IsWithinMarker = function (this, marker)
      return SlipeMtaDefinitions.MtaShared.IsElementWithinMarker(this.element, marker:getMTAElement())
    end
    -- <summary>
    -- Attach this attachable to a toAttachable using a matrix to describe the positional and rotational offset
    -- </summary>
    AttachTo = function (this, toElement, offsetMatrix)
      AttachTo2(this, toElement, offsetMatrix:getTranslation(), SystemNumerics.Quaternion.CreateFromRotationMatrix(offsetMatrix))
    end
    -- <summary>
    -- Attach this attachable to a toAttachable with 2 vectors describing a position offset and a rotation offset
    -- </summary>
    AttachTo1 = function (this, toElement, positionOffset, rotationOffset)
      SlipeMtaDefinitions.MtaShared.AttachElements(this.element, toElement:getMTAElement(), positionOffset.X, positionOffset.Y, positionOffset.Z, rotationOffset.X, rotationOffset.Y, rotationOffset.Z)
    end
    -- <summary>
    -- Attach this attachable to a toAttachable with a vector describing the position offset and a quaternion describing the rotation offset
    -- </summary>
    AttachTo2 = function (this, toElement, positionOffset, rotationOffset)
      AttachTo1(this, toElement, positionOffset:__clone__(), SlipeSharedHelpers.NumericHelper.QuaternionToEuler(rotationOffset:__clone__()))
    end
    -- <summary>
    -- Attach this attachable to a toAttachable without any offset
    -- </summary>
    AttachTo3 = function (this, toElement)
      AttachTo1(this, toElement, SystemNumerics.Vector3.getZero(), SystemNumerics.Vector3.getZero())
    end
    -- <summary>
    -- Detach this attachable
    -- </summary>
    Detach = function (this)
      SlipeMtaDefinitions.MtaShared.DetachElements(this.element)
    end
    getOffset = function (this)
      local offsets = SlipeMtaDefinitions.MtaShared.GetElementAttachedOffsets(this.element)
      local m = SystemNumerics.Matrix4x4.CreateFromQuaternion(SlipeSharedHelpers.NumericHelper.EulerToQuaternion(SystemNumerics.Vector3(offsets[4], offsets[5], offsets[6])))
      m:setTranslation(SystemNumerics.Vector3(offsets[1], offsets[2], offsets[3]))
      return m:__clone__()
    end
    setOffset = function (this, value)
      local translationOffset = value:getTranslation()
      local rotationOffset = SlipeSharedHelpers.NumericHelper.QuaternionToEuler(SystemNumerics.Quaternion.CreateFromRotationMatrix(value))
      SlipeMtaDefinitions.MtaShared.SetElementAttachedOffsets(this.element, translationOffset.X, translationOffset.Y, translationOffset.Z, rotationOffset.X, rotationOffset.Y, rotationOffset.Z)
    end
    -- <summary>
    -- This function is used to retrieve an array of all elements of specified type within a range of 3D coordinates.
    -- </summary>
    GetWithinRange = function (position, range, type)
      local mtaElements = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaShared.GetElementsWithinRange(position.X, position.Y, position.Z, range, type), "MTAElement", T)
      return SlipeSharedElements.ElementManager.getInstance():CastArray(mtaElements, class)
    end
    -- <summary>
    -- Make this element face another element
    -- </summary>
    FaceElement = function (this, target)
      setRotation(this, SlipeSharedHelpers.NumericHelper.RotationBetweenPositions(getPosition(this), getPosition(target)))
    end
    class = {
      __inherits__ = function (out)
        return {
          out.Slipe.Shared.Elements.Element
        }
      end,
      getDimension = getDimension,
      setDimension = setDimension,
      getInterior = getInterior,
      setInterior = setInterior,
      getFrozen = getFrozen,
      setFrozen = setFrozen,
      getAlpha = getAlpha,
      setAlpha = setAlpha,
      getHealth = getHealth,
      setHealth = setHealth,
      getModel = getModel,
      setModel = setModel,
      getCollisionShape = getCollisionShape,
      getCollisionsEnabled = getCollisionsEnabled,
      setCollisionsEnabled = setCollisionsEnabled,
      getLowLODElement = getLowLODElement,
      setLowLODElement = setLowLODElement,
      getDoubleSided = getDoubleSided,
      setDoubleSided = setDoubleSided,
      getIsInWater = getIsInWater,
      getIsLowLOD = getIsLowLOD,
      getPosition = getPosition,
      setPosition = setPosition,
      getRotation = getRotation,
      setRotation = setRotation,
      getQuaternionRotation = getQuaternionRotation,
      setQuaternionRotation = setQuaternionRotation,
      getMatrix = getMatrix,
      setMatrix = setMatrix,
      getForwardVector = getForwardVector,
      getRightVector = getRightVector,
      getUpVector = getUpVector,
      getVelocity = getVelocity,
      setVelocity = setVelocity,
      getAngularVelocity = getAngularVelocity,
      setAngularVelocity = setAngularVelocity,
      getAngularQuaternionVelocity = getAngularQuaternionVelocity,
      setAngularQuaternionVelocity = setAngularQuaternionVelocity,
      getToAttached = getToAttached,
      getIsAttached = getIsAttached,
      IsWithinCollisionShape = IsWithinCollisionShape,
      IsWithinMarker = IsWithinMarker,
      AttachTo = AttachTo,
      AttachTo1 = AttachTo1,
      AttachTo2 = AttachTo2,
      AttachTo3 = AttachTo3,
      Detach = Detach,
      getOffset = getOffset,
      setOffset = setOffset,
      GetWithinRange = GetWithinRange,
      FaceElement = FaceElement,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Alpha", 0x106, System.Int32, getAlpha, setAlpha },
            { "AngularQuaternionVelocity", 0x106, System.Numerics.Quaternion, getAngularQuaternionVelocity, setAngularQuaternionVelocity },
            { "AngularVelocity", 0x106, System.Numerics.Vector3, getAngularVelocity, setAngularVelocity },
            { "CollisionsEnabled", 0x106, System.Boolean, getCollisionsEnabled, setCollisionsEnabled },
            { "CollisionShape", 0x206, out.Slipe.Shared.CollisionShapes.CollisionShape, getCollisionShape },
            { "Dimension", 0x106, System.Int32, getDimension, setDimension },
            { "DoubleSided", 0x106, System.Boolean, getDoubleSided, setDoubleSided },
            { "ForwardVector", 0x206, System.Numerics.Vector3, getForwardVector },
            { "Frozen", 0x106, System.Boolean, getFrozen, setFrozen },
            { "Health", 0x106, System.Single, getHealth, setHealth },
            { "Interior", 0x106, System.Int32, getInterior, setInterior },
            { "IsAttached", 0x206, System.Boolean, getIsAttached },
            { "IsInWater", 0x206, System.Boolean, getIsInWater },
            { "IsLowLOD", 0x206, System.Boolean, getIsLowLOD },
            { "LowLODElement", 0x106, class, getLowLODElement, setLowLODElement },
            { "Matrix", 0x106, System.Numerics.Matrix4x4, getMatrix, setMatrix },
            { "Model", 0x106, System.Int32, getModel, setModel },
            { "Offset", 0x106, System.Numerics.Matrix4x4, getOffset, setOffset },
            { "Position", 0x106, System.Numerics.Vector3, getPosition, setPosition },
            { "QuaternionRotation", 0x106, System.Numerics.Quaternion, getQuaternionRotation, setQuaternionRotation },
            { "RightVector", 0x206, System.Numerics.Vector3, getRightVector },
            { "Rotation", 0x106, System.Numerics.Vector3, getRotation, setRotation },
            { "ToAttached", 0x206, class, getToAttached },
            { "UpVector", 0x206, System.Numerics.Vector3, getUpVector },
            { "Velocity", 0x106, System.Numerics.Vector3, getVelocity, setVelocity }
          },
          methods = {
            { ".ctor", 0x106, nil, out.Slipe.MtaDefinitions.MtaElement },
            { "AttachTo", 0x206, AttachTo, class, System.Numerics.Matrix4x4 },
            { "AttachTo", 0x306, AttachTo1, class, System.Numerics.Vector3, System.Numerics.Vector3 },
            { "AttachTo", 0x306, AttachTo2, class, System.Numerics.Vector3, System.Numerics.Quaternion },
            { "AttachTo", 0x106, AttachTo3, class },
            { "Detach", 0x6, Detach },
            { "FaceElement", 0x106, FaceElement, class },
            { "GetWithinRange", 0x38E, GetWithinRange, System.Numerics.Vector3, System.Single, System.String, System.Array(out.Slipe.Shared.Elements.PhysicalElement) },
            { "IsWithinCollisionShape", 0x186, IsWithinCollisionShape, out.Slipe.Shared.CollisionShapes.CollisionShape, System.Boolean },
            { "IsWithinMarker", 0x186, IsWithinMarker, out.Slipe.Shared.Markers.SharedMarker, System.Boolean }
          },
          events = {
            { "OnClicked", 0x6, System.Delegate(class, out.Slipe.Shared.Elements.Events.OnClickedEventArgs, System.Void) },
            { "OnModelChange", 0x6, System.Delegate(class, out.Slipe.Shared.Elements.Events.OnModelChangeEventArgs, System.Void) },
            { "OnStartSync", 0x6, System.Delegate(class, out.Slipe.Shared.Elements.Events.OnStartSyncEventArgs, System.Void) },
            { "OnStopSync", 0x6, System.Delegate(class, out.Slipe.Shared.Elements.Events.OnStopSyncEventArgs, System.Void) },
            { "OnStreamIn", 0x6, System.Delegate(class, out.Slipe.Shared.Elements.Events.OnSteamInEventArgs, System.Void) },
            { "OnStreamOut", 0x6, System.Delegate(class, out.Slipe.Shared.Elements.Events.OnSteamOutEventArgs, System.Void) }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)

-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeSharedElements
local SlipeSharedUtilities
local SlipeSharedVehicles
local ArrayColor
local ArrayInt32
local DictInt32Int32
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedElements = Slipe.Shared.Elements
  SlipeSharedUtilities = Slipe.Shared.Utilities
  SlipeSharedVehicles = Slipe.Shared.Vehicles
  ArrayColor = System.Array(SlipeSharedUtilities.Color)
  ArrayInt32 = System.Array(System.Int32)
  DictInt32Int32 = System.Dictionary(System.Int32, System.Int32)
end)
System.namespace("Slipe.Shared.Vehicles", function (namespace)
  -- <summary>
  -- Represents a vehicle in the GTA world
  -- </summary>
  namespace.class("SharedVehicle", function (namespace)
    local getPrimaryColor, setPrimaryColor, getSecondaryColor, setSecondaryColor, getColors, setColors, getHeadLightColor, setHeadLightColor, 
    getName, getMaxPassengers, getEngineRunning, setEngineRunning, getHandling, getOverrideLights, setOverrideLights, getPaintjob, 
    setPaintjob, getPlateText, setPlateText, getSirens, getVehicleType, getUpgrades, getIsBlown, getDamageProof, 
    setDamageProof, getFuelTankExplodable, setFuelTankExplodable, getLocked, setLocked, getIsOnGround, setDoorsUndamagable, getVariant, 
    getWheelState, setWheelState, getVehicleTowedByThis, Fix, DetachTowedVehicle, DetachAnyTowedVehicle, AddUpgrade, GetCompatibleUpgrades, 
    GetCompatibleUpgrades1, GetUpgradeOnSlot, RemoveUpgrade, GetDoorOpenRatio, SetDoorOpenRatio, GetDoorState, SetDoorState, GetLightState, 
    SetLightState, GetPanelDamage, SetPanelDamage, class, __ctor__
    __ctor__ = function (this, element)
      SlipeSharedElements.PhysicalElement.__ctor__(this, element)
    end
    getPrimaryColor = function (this)
      local r = SlipeMtaDefinitions.MtaShared.GetVehicleColor(this.element, true)
      return System.new(SlipeSharedUtilities.Color, 4, System.toByte(r[1]), System.toByte(r[2]), System.toByte(r[3]))
    end
    setPrimaryColor = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleColor(this.element, value:getR(), value:getG(), value:getB(), getSecondaryColor(this):getR(), getSecondaryColor(this):getG(), getSecondaryColor(this):getB(), 0, 0, 0, 0, 0, 0)
    end
    getSecondaryColor = function (this)
      local r = SlipeMtaDefinitions.MtaShared.GetVehicleColor(this.element, true)
      return System.new(SlipeSharedUtilities.Color, 4, System.toByte(r[3]), System.toByte(r[5]), System.toByte(r[6]))
    end
    setSecondaryColor = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleColor(this.element, getPrimaryColor(this):getR(), getPrimaryColor(this):getG(), getPrimaryColor(this):getB(), value:getR(), value:getG(), value:getB(), 0, 0, 0, 0, 0, 0)
    end
    getColors = function (this)
      local r = SlipeMtaDefinitions.MtaShared.GetVehicleColor(this.element, true)
      local c = ArrayColor:new(4)
      c:set(0, System.new(SlipeSharedUtilities.Color, 4, System.toByte(r[1]), System.toByte(r[2]), System.toByte(r[3])))
      c:set(1, System.new(SlipeSharedUtilities.Color, 4, System.toByte(r[4]), System.toByte(r[5]), System.toByte(r[6])))
      c:set(2, System.new(SlipeSharedUtilities.Color, 4, System.toByte(r[7]), System.toByte(r:getRest()[1]), System.toByte(r:getRest()[2])))
      c:set(3, System.new(SlipeSharedUtilities.Color, 4, System.toByte(r:getRest()[3]), System.toByte(r:getRest()[4]), System.toByte(r:getRest()[5])))
      return c
    end
    setColors = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleColor(this.element, value:get(0):getR(), value:get(0):getG(), value:get(0):getB(), value:get(1):getR(), value:get(1):getG(), value:get(1):getB(), value:get(2):getR(), value:get(2):getG(), value:get(2):getB(), value:get(3):getR(), value:get(3):getG(), value:get(3):getB())
    end
    getHeadLightColor = function (this)
      local r = SlipeMtaDefinitions.MtaShared.GetVehicleHeadLightColor(this.element)
      return System.new(SlipeSharedUtilities.Color, 4, System.toByte(r[1]), System.toByte(r[2]), System.toByte(r[3]))
    end
    setHeadLightColor = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleHeadLightColor(this.element, value:getR(), value:getG(), value:getB())
    end
    getName = function (this)
      return SlipeMtaDefinitions.MtaShared.GetVehicleName(this.element)
    end
    getMaxPassengers = function (this)
      return SlipeMtaDefinitions.MtaShared.GetVehicleMaxPassengers(this.element)
    end
    getEngineRunning = function (this)
      return SlipeMtaDefinitions.MtaShared.GetVehicleEngineState(this.element)
    end
    setEngineRunning = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleEngineState(this.element, value)
    end
    getHandling = function (this)
      if this.handling == nil then
        this.handling = System.new(SlipeSharedVehicles.Handling, 2, this)
      end
      return this.handling
    end
    getOverrideLights = function (this)
      return SlipeMtaDefinitions.MtaShared.GetVehicleOverrideLights(this.element)
    end
    setOverrideLights = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleOverrideLights(this.element, value)
    end
    getPaintjob = function (this)
      return SlipeMtaDefinitions.MtaShared.GetVehiclePaintjob(this.element)
    end
    setPaintjob = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehiclePaintjob(this.element, value)
    end
    getPlateText = function (this)
      return SlipeMtaDefinitions.MtaShared.GetVehiclePlateText(this.element)
    end
    setPlateText = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehiclePlateText(this.element, value)
    end
    getSirens = function (this)
      if this.sirens == nil then
        this.sirens = SlipeSharedVehicles.SharedSirens(this)
      end
      return this.sirens
    end
    getVehicleType = function (this)
      return SlipeMtaDefinitions.MtaShared.GetVehicleType(this.element)
    end
    getUpgrades = function (this)
      local d = System.cast(DictInt32Int32, SlipeMtaDefinitions.MtaShared.GetDictionaryFromTable(SlipeMtaDefinitions.MtaShared.GetVehicleUpgrades(this.element), "System.Int32", "System.Int32"))
      local r = DictInt32Int32()
      for _, upgrade in System.each(d) do
        r:AddKeyValue(upgrade.Key, upgrade.Value)
      end
      return r
    end
    getIsBlown = function (this)
      return SlipeMtaDefinitions.MtaShared.IsVehicleBlown(this.element)
    end
    getDamageProof = function (this)
      return SlipeMtaDefinitions.MtaShared.IsVehicleDamageProof(this.element)
    end
    setDamageProof = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleDamageProof(this.element, value)
    end
    getFuelTankExplodable = function (this)
      return SlipeMtaDefinitions.MtaShared.IsVehicleFuelTankExplodable(this.element)
    end
    setFuelTankExplodable = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleFuelTankExplodable(this.element, value)
    end
    getLocked = function (this)
      return SlipeMtaDefinitions.MtaShared.IsVehicleLocked(this.element)
    end
    setLocked = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleLocked(this.element, value)
    end
    getIsOnGround = function (this)
      return SlipeMtaDefinitions.MtaShared.IsVehicleOnGround(this.element)
    end
    setDoorsUndamagable = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleDoorsUndamageable(this.element, value)
    end
    getVariant = function (this)
      return SlipeMtaDefinitions.MtaShared.GetVehicleVariant(this.element)
    end
    getWheelState = function (this)
      local states = SlipeMtaDefinitions.MtaShared.GetVehicleWheelStates(this.element)
      return System.tuple(states[1], states[2], states[3], states[4])
    end
    setWheelState = function (this, value)
      SlipeMtaDefinitions.MtaShared.SetVehicleWheelStates(this.element, value[1], value[2], value[3], value[4])
    end
    getVehicleTowedByThis = function (this)
      return SlipeSharedElements.ElementManager.getInstance():GetElement(SlipeMtaDefinitions.MtaShared.GetVehicleTowedByVehicle(this.element), class)
    end
    -- <summary>
    -- This function will set a vehicle's health to full and fix its damage model. If you wish to only change the vehicle's health, without affecting its damage model, use Health.
    -- </summary>
    Fix = function (this)
      return SlipeMtaDefinitions.MtaShared.FixVehicle(this.element)
    end
    -- <summary>
    -- Detach a towed vehicle if any
    -- </summary>
    DetachTowedVehicle = function (this, attachedVehicle)
      return SlipeMtaDefinitions.MtaShared.DetachTrailerFromVehicle(this.element, attachedVehicle:getMTAElement())
    end
    -- <summary>
    -- Detach all vehicles that are towed by this vehicle
    -- </summary>
    DetachAnyTowedVehicle = function (this)
      return SlipeMtaDefinitions.MtaShared.DetachTrailerFromVehicle(this.element)
    end
    -- <summary>
    -- Adds a vehicle upgrade to this vehicle
    -- </summary>
    AddUpgrade = function (this, upgrade)
      return SlipeMtaDefinitions.MtaShared.AddVehicleUpgrade(this.element, upgrade)
    end
    -- <summary>
    -- Get compatible upgrades for a specific upgrade slot
    -- </summary>
    GetCompatibleUpgrades = function (this, slot)
      local upInts = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaShared.GetVehicleCompatibleUpgrades(this.element, slot), "System.Int32", T)
      local upgrades = ArrayInt32:new(#upInts)
      for i = 0, #upInts - 1 do
        upgrades:set(i, upInts:get(i))
      end
      return upgrades
    end
    -- <summary>
    -- Get all compatible upgrades for this vehicle
    -- </summary>
    GetCompatibleUpgrades1 = function (this)
      local upInts = SlipeMtaDefinitions.MtaShared.GetArrayFromTable(SlipeMtaDefinitions.MtaShared.GetVehicleCompatibleUpgrades(this.element, - 1), "System.Int32", T)
      local upgrades = ArrayInt32:new(#upInts)
      for i = 0, #upInts - 1 do
        upgrades:set(i, upInts:get(i))
      end
      return upgrades
    end
    -- <summary>
    -- This function returns the current upgrade id on the vehicle's 'upgrade slot'
    -- </summary>
    GetUpgradeOnSlot = function (this, slot)
      return SlipeMtaDefinitions.MtaShared.GetVehicleUpgradeOnSlot(this.element, slot)
    end
    -- <summary>
    -- This function removes an already existing upgrade from the specified vehicle, eg: nos, hydraulics.
    -- </summary>
    RemoveUpgrade = function (this, upgrade)
      return SlipeMtaDefinitions.MtaShared.RemoveVehicleUpgrade(this.element, upgrade)
    end
    -- <summary>
    -- This function tells you how open a door is (the 'open ratio').
    -- </summary>
    GetDoorOpenRatio = function (this, door)
      return SlipeMtaDefinitions.MtaShared.GetVehicleDoorOpenRatio(this.element, door)
    end
    -- <summary>
    -- This function sets how much a vehicle's door is open.
    -- </summary>
    SetDoorOpenRatio = function (this, door, ratio, time)
      return SlipeMtaDefinitions.MtaShared.SetVehicleDoorOpenRatio(this.element, door, ratio, time)
    end
    -- <summary>
    -- This function returns the current state of the specifed door on this vehicle.
    -- </summary>
    GetDoorState = function (this, door)
      return SlipeMtaDefinitions.MtaShared.GetVehicleDoorState(this.element, door)
    end
    -- <summary>
    -- This function sets the state of the specified door on the vehicle.
    -- </summary>
    SetDoorState = function (this, door, state)
      return SlipeMtaDefinitions.MtaShared.SetVehicleDoorState(this.element, door, state)
    end
    -- <summary>
    -- This function returns the current state of the specifed light on this vehicle.
    -- </summary>
    GetLightState = function (this, light)
      return SlipeMtaDefinitions.MtaShared.GetVehicleLightState(this.element, light)
    end
    -- <summary>
    -- This function sets the state of the specified light on the vehicle.
    -- </summary>
    SetLightState = function (this, light, state)
      return SlipeMtaDefinitions.MtaShared.SetVehicleLightState(this.element, light, state)
    end
    -- <summary>
    -- Get the damage status of a particular vehicle panel
    -- </summary>
    GetPanelDamage = function (this, panel)
      return SlipeMtaDefinitions.MtaShared.GetVehiclePanelState(this.element, panel)
    end
    -- <summary>
    -- Set the damage status of a particular vehicle panel
    -- </summary>
    SetPanelDamage = function (this, panel, damage)
      return SlipeMtaDefinitions.MtaShared.SetVehiclePanelState(this.element, panel, damage)
    end
    class = {
      __inherits__ = function (out)
        return {
          out.Slipe.Shared.Elements.PhysicalElement
        }
      end,
      getPrimaryColor = getPrimaryColor,
      setPrimaryColor = setPrimaryColor,
      getSecondaryColor = getSecondaryColor,
      setSecondaryColor = setSecondaryColor,
      getColors = getColors,
      setColors = setColors,
      getHeadLightColor = getHeadLightColor,
      setHeadLightColor = setHeadLightColor,
      getName = getName,
      getMaxPassengers = getMaxPassengers,
      getEngineRunning = getEngineRunning,
      setEngineRunning = setEngineRunning,
      getHandling = getHandling,
      getOverrideLights = getOverrideLights,
      setOverrideLights = setOverrideLights,
      getPaintjob = getPaintjob,
      setPaintjob = setPaintjob,
      getPlateText = getPlateText,
      setPlateText = setPlateText,
      getSirens = getSirens,
      getVehicleType = getVehicleType,
      getUpgrades = getUpgrades,
      getIsBlown = getIsBlown,
      getDamageProof = getDamageProof,
      setDamageProof = setDamageProof,
      getFuelTankExplodable = getFuelTankExplodable,
      setFuelTankExplodable = setFuelTankExplodable,
      getLocked = getLocked,
      setLocked = setLocked,
      getIsOnGround = getIsOnGround,
      setDoorsUndamagable = setDoorsUndamagable,
      getVariant = getVariant,
      getWheelState = getWheelState,
      setWheelState = setWheelState,
      getVehicleTowedByThis = getVehicleTowedByThis,
      Fix = Fix,
      DetachTowedVehicle = DetachTowedVehicle,
      DetachAnyTowedVehicle = DetachAnyTowedVehicle,
      AddUpgrade = AddUpgrade,
      GetCompatibleUpgrades = GetCompatibleUpgrades,
      GetCompatibleUpgrades1 = GetCompatibleUpgrades1,
      GetUpgradeOnSlot = GetUpgradeOnSlot,
      RemoveUpgrade = RemoveUpgrade,
      GetDoorOpenRatio = GetDoorOpenRatio,
      SetDoorOpenRatio = SetDoorOpenRatio,
      GetDoorState = GetDoorState,
      SetDoorState = SetDoorState,
      GetLightState = GetLightState,
      SetLightState = SetLightState,
      GetPanelDamage = GetPanelDamage,
      SetPanelDamage = SetPanelDamage,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "handling", 0x1, out.Slipe.Shared.Vehicles.Handling },
            { "sirens", 0x1, out.Slipe.Shared.Vehicles.SharedSirens }
          },
          properties = {
            { "Colors", 0x106, System.Array(out.Slipe.Shared.Utilities.Color), getColors, setColors },
            { "DamageProof", 0x106, System.Boolean, getDamageProof, setDamageProof },
            { "DoorsUndamagable", 0x306, System.Boolean, setDoorsUndamagable },
            { "EngineRunning", 0x106, System.Boolean, getEngineRunning, setEngineRunning },
            { "FuelTankExplodable", 0x106, System.Boolean, getFuelTankExplodable, setFuelTankExplodable },
            { "Handling", 0x206, out.Slipe.Shared.Vehicles.Handling, getHandling },
            { "HeadLightColor", 0x106, out.Slipe.Shared.Utilities.Color, getHeadLightColor, setHeadLightColor },
            { "IsBlown", 0x206, System.Boolean, getIsBlown },
            { "IsOnGround", 0x206, System.Boolean, getIsOnGround },
            { "Locked", 0x106, System.Boolean, getLocked, setLocked },
            { "MaxPassengers", 0x206, System.Int32, getMaxPassengers },
            { "Name", 0x206, System.String, getName },
            { "OverrideLights", 0x106, System.Int32, getOverrideLights, setOverrideLights },
            { "Paintjob", 0x106, System.Int32, getPaintjob, setPaintjob },
            { "PlateText", 0x106, System.String, getPlateText, setPlateText },
            { "PrimaryColor", 0x106, out.Slipe.Shared.Utilities.Color, getPrimaryColor, setPrimaryColor },
            { "SecondaryColor", 0x106, out.Slipe.Shared.Utilities.Color, getSecondaryColor, setSecondaryColor },
            { "Sirens", 0x206, out.Slipe.Shared.Vehicles.SharedSirens, getSirens },
            { "Upgrades", 0x206, System.Dictionary(System.Int32, System.Int32), getUpgrades },
            { "Variant", 0x206, System.Tuple, getVariant },
            { "VehicleTowedByThis", 0x206, class, getVehicleTowedByThis },
            { "VehicleType", 0x206, System.String, getVehicleType },
            { "WheelState", 0x106, System.Tuple, getWheelState, setWheelState }
          },
          methods = {
            { ".ctor", 0x106, nil, out.Slipe.MtaDefinitions.MtaElement },
            { "AddUpgrade", 0x186, AddUpgrade, System.Int32, System.Boolean },
            { "DetachAnyTowedVehicle", 0x86, DetachAnyTowedVehicle, System.Boolean },
            { "DetachTowedVehicle", 0x186, DetachTowedVehicle, class, System.Boolean },
            { "Fix", 0x86, Fix, System.Boolean },
            { "GetCompatibleUpgrades", 0x186, GetCompatibleUpgrades, System.Int32, System.Array(System.Int32) },
            { "GetCompatibleUpgrades", 0x86, GetCompatibleUpgrades1, System.Array(System.Int32) },
            { "GetDoorOpenRatio", 0x186, GetDoorOpenRatio, System.Int32, System.Single },
            { "GetDoorState", 0x186, GetDoorState, System.Int32, System.Int32 },
            { "GetLightState", 0x186, GetLightState, System.Int32, System.Int32 },
            { "GetPanelDamage", 0x186, GetPanelDamage, System.Int32, System.Int32 },
            { "GetUpgradeOnSlot", 0x186, GetUpgradeOnSlot, System.Int32, System.Int32 },
            { "RemoveUpgrade", 0x186, RemoveUpgrade, System.Int32, System.Boolean },
            { "SetDoorOpenRatio", 0x386, SetDoorOpenRatio, System.Int32, System.Single, System.Int32, System.Boolean },
            { "SetDoorState", 0x286, SetDoorState, System.Int32, System.Int32, System.Boolean },
            { "SetLightState", 0x286, SetLightState, System.Int32, System.Int32, System.Boolean },
            { "SetPanelDamage", 0x286, SetPanelDamage, System.Int32, System.Int32, System.Boolean }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)
end)

-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SlipeSharedElements
local SlipeSharedIO
local ArrayString
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedElements = Slipe.Shared.Elements
  SlipeSharedIO = Slipe.Shared.IO
  ArrayString = System.Array(System.String)
end)
System.namespace("Slipe.Client.Browsers", function (namespace)
  -- <summary>
  -- Class that wraps MTA browsers
  -- </summary>
  namespace.class("Browser", function (namespace)
    local getSettings, getCanNavigateBack, getCanNavigateForward, getTitle, getUrl, getIsLoading, getIsFocused, setVolume, 
    setRenderingPaused, setDevTools, ReloadPage, LoadUrl, Focus, GetProperty, InjectMouseDown, InjectMouseUp, 
    InjectMouseMove, InjectMouseWheel, Resize, ExecuteJavascript, ExecuteJavascript1, IsDomainBlocked, RequestDomains, RequestDomain, 
    HandleDomainRequest, class, __ctor1__, __ctor2__
    __ctor1__ = function (this, element)
      SlipeSharedElements.Element.__ctor__[2](this, element)
    end
    -- <summary>
    -- Create a browser from the createBrowser parameters
    -- </summary>
    __ctor2__ = function (this, width, height, isLocal, transparent)
      __ctor1__(this, SlipeMtaDefinitions.MtaClient.CreateBrowser(width, height, isLocal, transparent))
    end
    getSettings = function ()
      return SlipeMtaDefinitions.MtaClient.GetBrowserSettings()
    end
    getCanNavigateBack = function (this)
      return SlipeMtaDefinitions.MtaClient.CanBrowserNavigateBack(this.element)
    end
    getCanNavigateForward = function (this)
      return SlipeMtaDefinitions.MtaClient.CanBrowserNavigateForward(this.element)
    end
    getTitle = function (this)
      return SlipeMtaDefinitions.MtaClient.GetBrowserTitle(this.element)
    end
    getUrl = function (this)
      return SlipeMtaDefinitions.MtaClient.GetBrowserURL(this.element)
    end
    getIsLoading = function (this)
      return SlipeMtaDefinitions.MtaClient.IsBrowserLoading(this.element)
    end
    getIsFocused = function (this)
      return SlipeMtaDefinitions.MtaClient.IsBrowserFocused(this.element)
    end
    setVolume = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetBrowserVolume(this.element, value)
    end
    setRenderingPaused = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetBrowserRenderingPaused(this.element, value)
    end
    setDevTools = function (this, value)
      SlipeMtaDefinitions.MtaClient.ToggleBrowserDevTools(this.element, value)
    end
    -- <summary>
    -- Reload the page of this browser
    -- </summary>
    ReloadPage = function (this)
      return SlipeMtaDefinitions.MtaClient.ReloadBrowserPage(this.element)
    end
    -- <summary>
    -- Load a specific browser URL
    -- </summary>
    LoadUrl = function (this, url, postData, urlEncoded)
      return SlipeMtaDefinitions.MtaClient.LoadBrowserURL(this.element, url, postData, urlEncoded)
    end
    -- <summary>
    -- Focus on this browser
    -- </summary>
    Focus = function (this)
      return SlipeMtaDefinitions.MtaClient.FocusBrowser(this.element)
    end
    -- <summary>
    -- Get a specific browser property
    -- </summary>
    GetProperty = function (this, key)
      return SlipeMtaDefinitions.MtaClient.GetBrowserProperty(this.element, key)
    end
    -- <summary>
    -- Inject a mousedown event in the browser
    -- </summary>
    InjectMouseDown = function (this, mouseButton)
      return SlipeMtaDefinitions.MtaClient.InjectBrowserMouseDown(this.element, mouseButton:ToEnumString(SlipeSharedIO.MouseButton):ToLower())
    end
    -- <summary>
    -- Inject a mouseup event in the browser
    -- </summary>
    InjectMouseUp = function (this, mouseButton)
      return SlipeMtaDefinitions.MtaClient.InjectBrowserMouseUp(this.element, mouseButton:ToEnumString(SlipeSharedIO.MouseButton):ToLower())
    end
    -- <summary>
    -- Inject a mousemove event to a specific position
    -- </summary>
    InjectMouseMove = function (this, position)
      return SlipeMtaDefinitions.MtaClient.InjectBrowserMouseMove(this.element, System.ToInt32(position.X), System.ToInt32(position.Y))
    end
    -- <summary>
    -- Inject a mouse scroll event
    -- </summary>
    InjectMouseWheel = function (this, vertical, horizontal)
      return SlipeMtaDefinitions.MtaClient.InjectBrowserMouseWheel(this.element, vertical, horizontal)
    end
    -- <summary>
    -- Resize the browser to specific dimensions
    -- </summary>
    Resize = function (this, dimensions)
      return SlipeMtaDefinitions.MtaClient.ResizeBrowser(this.element, dimensions.X, dimensions.Y)
    end
    -- <summary>
    -- Execute some javascript code
    -- </summary>
    ExecuteJavascript = function (this, javascript)
      System.Console.WriteLine("Executing " .. javascript)
      return SlipeMtaDefinitions.MtaClient.ExecuteBrowserJavascript(this.element, javascript)
    end
    -- <summary>
    -- Execute a javascript function using formatted js arguments
    -- </summary>
    ExecuteJavascript1 = function (this, function_, arguments)
      local javascriptString = function_ .. "("

      for _, argument in System.each(arguments) do
        javascriptString = javascriptString .. (argument:ToString() .. ", ")
      end
      javascriptString = javascriptString:Substring(0, #javascriptString - 2)

      javascriptString = javascriptString .. ")"
      return ExecuteJavascript(this, javascriptString)
    end
    -- <summary>
    -- Check if a specific domain is blocked
    -- </summary>
    IsDomainBlocked = function (domain, isURL)
      return SlipeMtaDefinitions.MtaClient.IsBrowserDomainBlocked(domain, isURL)
    end
    -- <summary>
    -- Opens a request window in order to accept the requested remote URLs
    -- </summary>
    RequestDomains = function (domains, isURL)
      return SlipeMtaDefinitions.MtaClient.RequestBrowserDomains(domains, isURL, HandleDomainRequest)
    end
    -- <summary>
    -- Opens a request window in order to accept a remote URL
    -- </summary>
    RequestDomain = function (domain, isURL)
      return RequestDomains(ArrayString(domain), isURL)
    end
    -- <summary>
    -- Handler that is triggered after a domain request was done
    -- </summary>
    HandleDomainRequest = function (wasAccepted, domains)
      for i = 0, #domains - 1 do
        local domain = domains:get(i)
        if wasAccepted then
          local default = class.OnDomainRequestAccepted
          if default ~= nil then
            default(domain)
          end
        else
          local default = class.OnDomainRequestDenied
          if default ~= nil then
            default(domain)
          end
        end
      end
    end
    class = {
      __inherits__ = function (out)
        return {
          out.Slipe.Shared.Elements.Element
        }
      end,
      getSettings = getSettings,
      getCanNavigateBack = getCanNavigateBack,
      getCanNavigateForward = getCanNavigateForward,
      getTitle = getTitle,
      getUrl = getUrl,
      getIsLoading = getIsLoading,
      getIsFocused = getIsFocused,
      setVolume = setVolume,
      setRenderingPaused = setRenderingPaused,
      setDevTools = setDevTools,
      ReloadPage = ReloadPage,
      LoadUrl = LoadUrl,
      Focus = Focus,
      GetProperty = GetProperty,
      InjectMouseDown = InjectMouseDown,
      InjectMouseUp = InjectMouseUp,
      InjectMouseMove = InjectMouseMove,
      InjectMouseWheel = InjectMouseWheel,
      Resize = Resize,
      ExecuteJavascript = ExecuteJavascript,
      ExecuteJavascript1 = ExecuteJavascript1,
      IsDomainBlocked = IsDomainBlocked,
      RequestDomains = RequestDomains,
      RequestDomain = RequestDomain,
      HandleDomainRequest = HandleDomainRequest,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          properties = {
            { "CanNavigateBack", 0x206, System.Boolean, getCanNavigateBack },
            { "CanNavigateForward", 0x206, System.Boolean, getCanNavigateForward },
            { "DevTools", 0x306, System.Boolean, setDevTools },
            { "IsFocused", 0x206, System.Boolean, getIsFocused },
            { "IsLoading", 0x206, System.Boolean, getIsLoading },
            { "RenderingPaused", 0x306, System.Boolean, setRenderingPaused },
            { "Settings", 0x20E, System.Object, getSettings },
            { "Title", 0x206, System.String, getTitle },
            { "Url", 0x206, System.String, getUrl },
            { "Volume", 0x306, System.Single, setVolume }
          },
          methods = {
            { ".ctor", 0x106, __ctor1__, out.Slipe.MtaDefinitions.MtaElement },
            { ".ctor", 0x406, __ctor2__, System.Int32, System.Int32, System.Boolean, System.Boolean },
            { "ExecuteJavascript", 0x286, ExecuteJavascript1, System.String, System.IEnumerable_1(out.Slipe.Client.Browsers.JavascriptVariable), System.Boolean },
            { "ExecuteJavascript", 0x186, ExecuteJavascript, System.String, System.Boolean },
            { "Focus", 0x86, Focus, System.Boolean },
            { "GetProperty", 0x186, GetProperty, System.String, System.Object },
            { "HandleDomainRequest", 0x20E, HandleDomainRequest, System.Boolean, System.Array(System.String) },
            { "InjectMouseDown", 0x186, InjectMouseDown, System.Int32, System.Boolean },
            { "InjectMouseMove", 0x186, InjectMouseMove, System.Numerics.Vector2, System.Boolean },
            { "InjectMouseUp", 0x186, InjectMouseUp, System.Int32, System.Boolean },
            { "InjectMouseWheel", 0x286, InjectMouseWheel, System.Int32, System.Int32, System.Boolean },
            { "IsDomainBlocked", 0x28E, IsDomainBlocked, System.String, System.Boolean, System.Boolean },
            { "LoadUrl", 0x386, LoadUrl, System.String, System.String, System.Boolean, System.Boolean },
            { "ReloadPage", 0x86, ReloadPage, System.Boolean },
            { "RequestDomain", 0x28E, RequestDomain, System.String, System.Boolean, System.Boolean },
            { "RequestDomains", 0x28E, RequestDomains, System.Array(System.String), System.Boolean, System.Boolean },
            { "Resize", 0x186, Resize, System.Numerics.Vector2, System.Boolean }
          },
          events = {
            { "OnDomainRequestAccepted", 0xE, System.Delegate(System.String, System.Void) },
            { "OnDomainRequestDenied", 0xE, System.Delegate(System.String, System.Void) },
            { "OnCreated", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnCreatedEventArgs, System.Void) },
            { "OnCursorChange", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnCursorChangeEventArgs, System.Void) },
            { "OnDocumentReady", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnDocumentReadEventArgs, System.Void) },
            { "OnInputFocusChange", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnInputFocusChangeEventArgs, System.Void) },
            { "OnLoadFail", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnLoadFailEventArgs, System.Void) },
            { "OnLoadStart", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnLoadStartEventArgs, System.Void) },
            { "OnNavigate", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnNavigateEventArgs, System.Void) },
            { "OnPopup", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnPopupEventArgs, System.Void) },
            { "OnResourceBlocked", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnResourceBlockedEventArgs, System.Void) },
            { "OnTooltip", 0x6, System.Delegate(class, out.Slipe.Client.Browsers.Events.OnTooltipEventArgs, System.Void) },
            { "OnWhiteListChange", 0xE, System.Delegate(out.Slipe.Client.Elements.RootElement, out.Slipe.Client.Browsers.Events.OnWhiteListChangeEventArgs, System.Void) }
          },
          class = { 0x6, System.new(out.Slipe.Shared.Elements.DefaultElementClassAttribute, 2, 31 --[[ElementType.Browser]]) }
        }
      end
    }
    return class
  end)
end)

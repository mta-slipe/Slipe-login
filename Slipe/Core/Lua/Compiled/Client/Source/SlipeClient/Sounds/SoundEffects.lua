-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
end)
System.namespace("Slipe.Client.Sounds", function (namespace)
  -- <summary>
  -- Represents effects that can be set on a Sound
  -- </summary>
  namespace.class("SoundEffects", function (namespace)
    local getGargle, setGargle, getCompressor, setCompressor, getEcho, setEcho, getI3Dl2Reverb, setI3Dl2Reverb, 
    getDistorion, setDistorion, getChorus, setChorus, getParameq, setParameq, getReverb, setReverb, 
    getFlanger, setFlanger, updateSoundEffects, __ctor__
    __ctor__ = function (this, sound)
      this.sound = sound
    end
    getGargle = function (this)
      updateSoundEffects(this)
      return this.gargle
    end
    setGargle = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundEffectEnabled(this.sound:getMTAElement(), "gargle", value)
    end
    getCompressor = function (this)
      updateSoundEffects(this)
      return this.compressor
    end
    setCompressor = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundEffectEnabled(this.sound:getMTAElement(), "compressor", value)
    end
    getEcho = function (this)
      updateSoundEffects(this)
      return this.echo
    end
    setEcho = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundEffectEnabled(this.sound:getMTAElement(), "echo", value)
    end
    getI3Dl2Reverb = function (this)
      updateSoundEffects(this)
      return this.i3dl2reverb
    end
    setI3Dl2Reverb = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundEffectEnabled(this.sound:getMTAElement(), "i3dl2reverb", value)
    end
    getDistorion = function (this)
      updateSoundEffects(this)
      return this.distortion
    end
    setDistorion = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundEffectEnabled(this.sound:getMTAElement(), "distortion", value)
    end
    getChorus = function (this)
      updateSoundEffects(this)
      return this.chorus
    end
    setChorus = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundEffectEnabled(this.sound:getMTAElement(), "chorus", value)
    end
    getParameq = function (this)
      updateSoundEffects(this)
      return this.parameq
    end
    setParameq = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundEffectEnabled(this.sound:getMTAElement(), "parameq", value)
    end
    getReverb = function (this)
      updateSoundEffects(this)
      return this.reverb
    end
    setReverb = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundEffectEnabled(this.sound:getMTAElement(), "reverb", value)
    end
    getFlanger = function (this)
      updateSoundEffects(this)
      return this.flanger
    end
    setFlanger = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundEffectEnabled(this.sound:getMTAElement(), "flanger", value)
    end
    updateSoundEffects = function (this)
      local soundEffects = SlipeMtaDefinitions.MtaShared.GetDictionaryFromTable(SlipeMtaDefinitions.MtaClient.GetSoundEffects(this.sound:getMTAElement()), "System.String", "System.Boolean")
      this.gargle = soundEffects:get("gargle")
      this.compressor = soundEffects:get("compressor")
      this.echo = soundEffects:get("echo")
      this.i3dl2reverb = soundEffects:get("i3dl2reverb")
      this.distortion = soundEffects:get("distortion")
      this.chorus = soundEffects:get("chorus")
      this.parameq = soundEffects:get("parameq")
      this.reverb = soundEffects:get("reverb")
      this.flanger = soundEffects:get("flanger")
    end
    return {
      gargle = false,
      getGargle = getGargle,
      setGargle = setGargle,
      compressor = false,
      getCompressor = getCompressor,
      setCompressor = setCompressor,
      echo = false,
      getEcho = getEcho,
      setEcho = setEcho,
      i3dl2reverb = false,
      getI3Dl2Reverb = getI3Dl2Reverb,
      setI3Dl2Reverb = setI3Dl2Reverb,
      distortion = false,
      getDistorion = getDistorion,
      setDistorion = setDistorion,
      chorus = false,
      getChorus = getChorus,
      setChorus = setChorus,
      parameq = false,
      getParameq = getParameq,
      setParameq = setParameq,
      reverb = false,
      getReverb = getReverb,
      setReverb = setReverb,
      flanger = false,
      getFlanger = getFlanger,
      setFlanger = setFlanger,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "chorus", 0x1, System.Boolean },
            { "compressor", 0x1, System.Boolean },
            { "distortion", 0x1, System.Boolean },
            { "echo", 0x1, System.Boolean },
            { "flanger", 0x1, System.Boolean },
            { "gargle", 0x1, System.Boolean },
            { "i3dl2reverb", 0x1, System.Boolean },
            { "parameq", 0x1, System.Boolean },
            { "reverb", 0x1, System.Boolean },
            { "sound", 0x1, out.Slipe.Client.Sounds.Sound }
          },
          properties = {
            { "Chorus", 0x106, System.Boolean, getChorus, setChorus },
            { "Compressor", 0x106, System.Boolean, getCompressor, setCompressor },
            { "Distorion", 0x106, System.Boolean, getDistorion, setDistorion },
            { "Echo", 0x106, System.Boolean, getEcho, setEcho },
            { "Flanger", 0x106, System.Boolean, getFlanger, setFlanger },
            { "Gargle", 0x106, System.Boolean, getGargle, setGargle },
            { "I3Dl2Reverb", 0x106, System.Boolean, getI3Dl2Reverb, setI3Dl2Reverb },
            { "Parameq", 0x106, System.Boolean, getParameq, setParameq },
            { "Reverb", 0x106, System.Boolean, getReverb, setReverb }
          },
          methods = {
            { ".ctor", 0x106, nil, out.Slipe.Client.Sounds.Sound },
            { "updateSoundEffects", 0x1, updateSoundEffects }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)

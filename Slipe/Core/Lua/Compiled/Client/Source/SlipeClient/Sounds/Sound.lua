-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientSounds
local SlipeMtaDefinitions
local SlipeSharedElements
local ArraySingle
System.import(function (out)
  SlipeClientSounds = Slipe.Client.Sounds
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedElements = Slipe.Shared.Elements
  ArraySingle = System.Array(System.Single)
end)
System.namespace("Slipe.Client.Sounds", function (namespace)
  -- <summary>
  -- Represents a sound played for the player
  -- </summary>
  namespace.class("Sound", function (namespace)
    local getBpm, getBufferLength, getEffects, getLength, getLevelData, getMetaTags, getPan, setPan, 
    getTrackPosition, setTrackPosition, getProperties, getSpeed, setSpeed, getVolume, setVolume, getPaused, 
    setPaused, GetFftData, Destroy, GetSfxStatus, class, __ctor1__, __ctor2__, __ctor3__, 
    __ctor4__, __ctor5__, __ctor6__
    __ctor1__ = function (this, element)
      SlipeSharedElements.Element.__ctor__[2](this, element)
    end
    -- <summary>
    -- Create sound
    -- </summary>
    __ctor2__ = function (this, pathOrUrl, looped, throttled)
      __ctor1__(this, SlipeMtaDefinitions.MtaClient.PlaySound(pathOrUrl, looped, throttled))
    end
    -- <summary>
    -- Create a GTA Sfx
    -- </summary>
    __ctor3__ = function (this, container, bankId, soundId, looped)
      __ctor1__(this, SlipeMtaDefinitions.MtaClient.PlaySFX(container:ToEnumString(SlipeClientSounds.SoundContainer):ToLower(), bankId, soundId, looped))
    end
    -- <summary>
    -- Create a GTA radio station sound
    -- </summary>
    __ctor4__ = function (this, station, trackId, looped)
      __ctor1__(this, SlipeMtaDefinitions.MtaClient.PlaySFX("radio", SlipeMtaDefinitions.MtaClient.GetRadioChannelName(station), trackId, looped))
    end
    -- <summary>
    -- Create an extra GTA radio station sound
    -- </summary>
    __ctor5__ = function (this, station, trackId, looped)
      __ctor1__(this, SlipeMtaDefinitions.MtaClient.PlaySFX("radio", station:ToEnumString(SlipeClientSounds.ExtraStations), trackId, looped))
    end
    __ctor6__ = function (this, player)
      SlipeSharedElements.Element.__ctor__[1](this)
      this.element = player:getMTAElement()
    end
    getBpm = function (this)
      return SlipeMtaDefinitions.MtaClient.GetSoundBPM(this.element)
    end
    getBufferLength = function (this)
      return SlipeMtaDefinitions.MtaClient.GetSoundBufferLength(this.element)
    end
    getEffects = function (this)
      if this.effects == nil then
        this.effects = SlipeClientSounds.SoundEffects(this)
      end
      return this.effects
    end
    getLength = function (this)
      return SlipeMtaDefinitions.MtaClient.GetSoundLength(this.element)
    end
    getLevelData = function (this)
      return SlipeMtaDefinitions.MtaClient.GetSoundLevelData(this.element)
    end
    getMetaTags = function (this)
      if this.meta == nil then
        this.meta = SlipeClientSounds.SoundMeta(this)
      end
      return this.meta
    end
    getPan = function (this)
      return SlipeMtaDefinitions.MtaClient.GetSoundPan(this.element)
    end
    setPan = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundPan(this.element, value)
    end
    getTrackPosition = function (this)
      return SlipeMtaDefinitions.MtaClient.GetSoundPosition(this.element)
    end
    setTrackPosition = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundPosition(this.element, value)
    end
    getProperties = function (this)
      if this.properties == nil then
        this.properties = SlipeClientSounds.SoundProperties(this)
      end
      return this.properties
    end
    getSpeed = function (this)
      return SlipeMtaDefinitions.MtaClient.GetSoundSpeed(this.element)
    end
    setSpeed = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundSpeed(this.element, value)
    end
    getVolume = function (this)
      return SlipeMtaDefinitions.MtaClient.GetSoundVolume(this.element)
    end
    setVolume = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundVolume(this.element, value)
    end
    getPaused = function (this)
      return SlipeMtaDefinitions.MtaClient.IsSoundPaused(this.element)
    end
    setPaused = function (this, value)
      SlipeMtaDefinitions.MtaClient.SetSoundPaused(this.element, value)
    end
    -- <summary>
    -- This function gets the fast fourier transform data for an audio stream which is an array of floats representing the current audio frame.
    -- </summary>
    GetFftData = function (this, iSamples, iBands)
      local raw = SlipeMtaDefinitions.MtaShared.GetDictionaryFromTable(SlipeMtaDefinitions.MtaClient.GetSoundFFTData(this.element, iSamples, iBands), "System.Int32", "System.Single")
      local fftData = ArraySingle:new(raw:getCount())
      for _, pair in System.each(raw) do
        fftData:set(pair.Key, pair.Value)
      end
      return fftData
    end
    -- <summary>
    -- Stop and destroy this sound
    -- </summary>
    Destroy = function (this)
      return SlipeMtaDefinitions.MtaClient.StopSound(this.element)
    end
    -- <summary>
    -- Check if a soundcontainer is available on this client
    -- </summary>
    GetSfxStatus = function (container)
      return SlipeMtaDefinitions.MtaClient.GetSFXStatus(container:ToEnumString(SlipeClientSounds.SoundContainer):ToLower())
    end
    class = {
      __inherits__ = function (out)
        return {
          out.Slipe.Shared.Elements.Element
        }
      end,
      getBpm = getBpm,
      getBufferLength = getBufferLength,
      getEffects = getEffects,
      getLength = getLength,
      getLevelData = getLevelData,
      getMetaTags = getMetaTags,
      getPan = getPan,
      setPan = setPan,
      getTrackPosition = getTrackPosition,
      setTrackPosition = setTrackPosition,
      getProperties = getProperties,
      getSpeed = getSpeed,
      setSpeed = setSpeed,
      getVolume = getVolume,
      setVolume = setVolume,
      getPaused = getPaused,
      setPaused = setPaused,
      GetFftData = GetFftData,
      Destroy = Destroy,
      GetSfxStatus = GetSfxStatus,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__,
        __ctor5__,
        __ctor6__
      },
      __metadata__ = function (out)
        return {
          properties = {
            { "Bpm", 0x206, System.Int32, getBpm },
            { "BufferLength", 0x206, System.Single, getBufferLength },
            { "Effects", 0x206, out.Slipe.Client.Sounds.SoundEffects, getEffects },
            { "Length", 0x206, System.Single, getLength },
            { "LevelData", 0x206, System.Tuple, getLevelData },
            { "MetaTags", 0x206, out.Slipe.Client.Sounds.SoundMeta, getMetaTags },
            { "Pan", 0x106, System.Single, getPan, setPan },
            { "Paused", 0x106, System.Boolean, getPaused, setPaused },
            { "Properties", 0x206, out.Slipe.Client.Sounds.SoundProperties, getProperties },
            { "Speed", 0x106, System.Single, getSpeed, setSpeed },
            { "TrackPosition", 0x106, System.Single, getTrackPosition, setTrackPosition },
            { "Volume", 0x106, System.Single, getVolume, setVolume }
          },
          fields = {
            { "effects", 0x1, out.Slipe.Client.Sounds.SoundEffects },
            { "meta", 0x1, out.Slipe.Client.Sounds.SoundMeta },
            { "properties", 0x1, out.Slipe.Client.Sounds.SoundProperties }
          },
          methods = {
            { ".ctor", 0x106, __ctor1__, out.Slipe.MtaDefinitions.MtaElement },
            { ".ctor", 0x306, __ctor2__, System.String, System.Boolean, System.Boolean },
            { ".ctor", 0x406, __ctor3__, System.Int32, System.Int32, System.Int32, System.Boolean },
            { ".ctor", 0x306, __ctor4__, System.Int32, System.Int32, System.Boolean },
            { ".ctor", 0x306, __ctor5__, System.Int32, System.Int32, System.Boolean },
            { ".ctor", 0x106, __ctor6__, out.Slipe.Client.Peds.Player },
            { "Destroy", 0x86, Destroy, System.Boolean },
            { "GetFftData", 0x286, GetFftData, System.Int32, System.Int32, System.Array(System.Single) },
            { "GetSfxStatus", 0x18E, GetSfxStatus, System.Int32, System.Boolean }
          },
          events = {
            { "OnBeat", 0x6, System.Delegate(class, out.Slipe.Client.Sounds.Events.OnBeatEventArgs, System.Void) },
            { "OnMetaChanged", 0x6, System.Delegate(class, out.Slipe.Client.Sounds.Events.OnMetaChangedEventArgs, System.Void) },
            { "OnDownloadFinished", 0x6, System.Delegate(class, out.Slipe.Client.Sounds.Events.OnDownloadFinishedEventArgs, System.Void) },
            { "OnStart", 0x6, System.Delegate(class, out.Slipe.Client.Sounds.Events.OnStartEventArgs, System.Void) },
            { "OnStop", 0x6, System.Delegate(class, out.Slipe.Client.Sounds.Events.OnStopEventArgs, System.Void) },
            { "OnStream", 0x6, System.Delegate(class, out.Slipe.Client.Sounds.Events.OnStreamEventArgs, System.Void) }
          },
          class = { 0x6, System.new(out.Slipe.Shared.Elements.DefaultElementClassAttribute, 2, 28 --[[ElementType.Sound]]) }
        }
      end
    }
    return class
  end)
end)

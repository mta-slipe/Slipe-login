-- Generated by CSharp.lua Compiler
local System = System
local SlipeSharedHelpers
local SystemNumerics
System.import(function (out)
  SlipeSharedHelpers = Slipe.Shared.Helpers
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Client.Helpers", function (namespace)
  -- <summary>
  -- Abstract class that implements attaching functionality in a lazy way (updates only when update is called)
  -- </summary>
  namespace.class("LazyAttachableObject", function (namespace)
    local getToAttached, getIsAttached, AttachTo, AttachTo1, AttachTo2, AttachTo3, Detach, OnAttach, 
    OnDetach, __ctor__
    __ctor__ = function (this)
      this.Offset = System.default(SystemNumerics.Matrix4x4)
    end
    getToAttached = function (this)
      return this.toAttached
    end
    getIsAttached = function (this)
      return this.toAttached ~= nil
    end
    -- <summary>
    -- Attach this attachable to a toAttachable using a matrix to describe the positional and rotational offset
    -- </summary>
    AttachTo = function (this, toElement, offsetMatrix)
      this.toAttached = toElement
      this.Offset = offsetMatrix:__clone__()
      this:OnAttach()
    end
    -- <summary>
    -- Attach this attachable to a toAttachable with 2 vectors describing a position offset and a rotation offset
    -- </summary>
    AttachTo1 = function (this, toElement, positionOffset, rotationOffset)
      AttachTo2(this, toElement, positionOffset:__clone__(), SlipeSharedHelpers.NumericHelper.EulerToQuaternion(rotationOffset:__clone__()))
    end
    -- <summary>
    -- Attach this attachable to a toAttachable with a vector describing the position offset and a quaternion describing the rotation offset
    -- </summary>
    AttachTo2 = function (this, toElement, positionOffset, rotationOffset)
      AttachTo(this, toElement, SystemNumerics.Matrix4x4.Transform(SystemNumerics.Matrix4x4.CreateTranslation(positionOffset), rotationOffset))
    end
    -- <summary>
    -- Attach this attachable to a toAttachable without any offset
    -- </summary>
    AttachTo3 = function (this, toElement)
      AttachTo(this, toElement, SystemNumerics.Matrix4x4.getIdentity())
    end
    -- <summary>
    -- Detach this attachable
    -- </summary>
    Detach = function (this)
      this:OnDetach()
    end
    OnAttach = function (this)
    end
    OnDetach = function (this)
      this.toAttached = nil
    end
    return {
      getToAttached = getToAttached,
      getIsAttached = getIsAttached,
      AttachTo = AttachTo,
      AttachTo1 = AttachTo1,
      AttachTo2 = AttachTo2,
      AttachTo3 = AttachTo3,
      Detach = Detach,
      OnAttach = OnAttach,
      OnDetach = OnDetach,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "toAttached", 0x3, out.Slipe.Shared.Elements.PhysicalElement }
          },
          properties = {
            { "IsAttached", 0x206, System.Boolean, getIsAttached },
            { "Offset", 0x6, System.Numerics.Matrix4x4 },
            { "ToAttached", 0x206, out.Slipe.Shared.Elements.PhysicalElement, getToAttached }
          },
          methods = {
            { "AttachTo", 0x206, AttachTo, out.Slipe.Shared.Elements.PhysicalElement, System.Numerics.Matrix4x4 },
            { "AttachTo", 0x306, AttachTo1, out.Slipe.Shared.Elements.PhysicalElement, System.Numerics.Vector3, System.Numerics.Vector3 },
            { "AttachTo", 0x306, AttachTo2, out.Slipe.Shared.Elements.PhysicalElement, System.Numerics.Vector3, System.Numerics.Quaternion },
            { "AttachTo", 0x106, AttachTo3, out.Slipe.Shared.Elements.PhysicalElement },
            { "Detach", 0x6, Detach },
            { "OnAttach", 0x3, OnAttach },
            { "OnDetach", 0x3, OnDetach }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)

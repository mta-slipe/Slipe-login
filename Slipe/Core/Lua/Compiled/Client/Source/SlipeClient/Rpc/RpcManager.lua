-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientElements
local SlipeClientRpc
local SlipeMtaDefinitions
local SlipeSharedElements
local SlipeSharedRpc
local DictStringRegisteredRpc
System.import(function (out)
  SlipeClientElements = Slipe.Client.Elements
  SlipeClientRpc = Slipe.Client.Rpc
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedElements = Slipe.Shared.Elements
  SlipeSharedRpc = Slipe.Shared.Rpc
  DictStringRegisteredRpc = System.Dictionary(System.String, SlipeClientRpc.RegisteredRpc)
end)
System.namespace("Slipe.Client.Rpc", function (namespace)
  namespace.class("RpcManager", function (namespace)
    local instance, getInstance, RegisterRPC, TriggerRPC, TriggerLatentRPC, class, __ctor__
    __ctor__ = function (this)
      this.RegisteredRPCs = DictStringRegisteredRpc()

      SlipeClientElements.RootElement.OnMiscelaniousEvent = SlipeClientElements.RootElement.OnMiscelaniousEvent + function (eventName, source, p1, p2, p3, p4, p5, p6, p7, p8)
        if this.RegisteredRPCs:ContainsKey(eventName) then
          local registeredRpc = this.RegisteredRPCs:get(eventName)

          local method = registeredRpc.callback

          local rpc = System.cast(SlipeSharedRpc.IRpc, System.Activator.CreateInstance(registeredRpc.type))
          rpc:Parse(p1)
          method(rpc)
        end
      end
    end
    getInstance = function ()
      if instance == nil then
        instance = class()
      end
      return instance
    end
    -- <summary>
    -- Register an RPC
    -- </summary>
    RegisterRPC = function (this, key, callback, CallbackType)
      this.RegisteredRPCs:set(key, System.new(SlipeClientRpc.RegisteredRpc, 2, function (parameters)
        callback(System.cast(CallbackType, parameters), CallbackType)
      end, System.typeof(CallbackType)))
      SlipeMtaDefinitions.MtaShared.AddEvent(key, true)
      SlipeSharedElements.Element.getRoot():ListenForEvent(key, true, "normal")
    end
    -- <summary>
    -- Trigger an RPC
    -- </summary>
    TriggerRPC = function (this, key, argument)
      SlipeMtaDefinitions.MtaClient.TriggerServerEvent(key, SlipeSharedElements.Element.getRoot():getMTAElement(), argument)
    end
    -- <summary>
    -- Trigger an RPC with limited bandwidth
    -- </summary>
    TriggerLatentRPC = function (this, key, bandwidth, argument, persists)
      SlipeMtaDefinitions.MtaClient.TriggerLatentServerEvent(key, bandwidth, persists, SlipeSharedElements.Element.getRoot():getMTAElement(), argument)
    end
    class = {
      getInstance = getInstance,
      RegisterRPC = RegisterRPC,
      TriggerRPC = TriggerRPC,
      TriggerLatentRPC = TriggerLatentRPC,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "instance", 0x9, class },
            { "RegisteredRPCs", 0x1, System.Dictionary(System.String, out.Slipe.Client.Rpc.RegisteredRpc) }
          },
          properties = {
            { "Instance", 0x20E, class, getInstance }
          },
          methods = {
            { ".ctor", 0x1, nil },
            { "RegisterRPC", 0x10206, RegisterRPC, function (CallbackType) return System.String, System.Delegate(CallbackType, System.Void) end },
            { "TriggerLatentRPC", 0x406, TriggerLatentRPC, System.String, System.Int32, out.Slipe.Shared.Rpc.IRpc, System.Boolean },
            { "TriggerRPC", 0x206, TriggerRPC, System.String, out.Slipe.Shared.Rpc.IRpc }
          },
          class = { 0x6 }
        }
      end
    }
    return class
  end)

  namespace.struct("RegisteredRpc", function (namespace)
    local __ctor1__, __ctor2__
    __ctor1__ = function (this)
    end
    __ctor2__ = function (this, callback, type)
      this.callback = callback
      this.type = type
    end
    return {
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "callback", 0x6, System.Delegate(out.Slipe.Shared.Rpc.IRpc, System.Void) },
            { "type", 0x6, System.Type }
          },
          methods = {
            { ".ctor", 0x206, __ctor2__, System.Delegate(out.Slipe.Shared.Rpc.IRpc, System.Void), System.Type }
          }
        }
      end
    }
  end)
end)

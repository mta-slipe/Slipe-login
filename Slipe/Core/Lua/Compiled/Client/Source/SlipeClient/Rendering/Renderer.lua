-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientRendering
local SlipeMtaDefinitions
local SystemNumerics
System.import(function (out)
  SlipeClientRendering = Slipe.Client.Rendering
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Client.Rendering", function (namespace)
  -- <summary>
  -- Singleton responsible for rendering
  -- </summary>
  namespace.class("Renderer", function (namespace)
    local status, getFpsLimit, setFpsLimit, screenSize, getScreenSize, getBlendMode, setBlendMode, setTestMode, 
    getStatus, SetRenderTarget, RevertRenderTargetToScreen, SetAspectRatioAdjustmentEnabled, WorldFromScreenPosition, ScreenFromWorldPosition, static
    static = function (this)
      screenSize = System.default(SystemNumerics.Vector2)
    end
    getFpsLimit = function ()
      return SlipeMtaDefinitions.MtaShared.GetFPSLimit()
    end
    setFpsLimit = function (value)
      SlipeMtaDefinitions.MtaShared.SetFPSLimit(value)
    end
    getScreenSize = function ()
      if SystemNumerics.Vector2.op_Equality(screenSize, SystemNumerics.Vector2.getZero()) then
        local size = SlipeMtaDefinitions.MtaClient.GuiGetScreenSize()
        screenSize = SystemNumerics.Vector2(size[1], size[2])
      end
      return screenSize:__clone__()
    end
    getBlendMode = function ()
      return System.cast(System.Int32, System.Enum.Parse(System.typeof(SlipeClientRendering.BlendMode), SlipeMtaDefinitions.MtaClient.DxGetBlendMode(), true))
    end
    setBlendMode = function (value)
      SlipeMtaDefinitions.MtaClient.DxSetBlendMode(value:ToEnumString(SlipeClientRendering.BlendMode))
    end
    setTestMode = function (value)
      SlipeMtaDefinitions.MtaClient.DxSetTestMode(value:ToEnumString(SlipeClientRendering.TestMode))
    end
    getStatus = function ()
      if status == nil then
        status = SlipeClientRendering.Status()
      end
      return status
    end
    -- <summary>
    -- This function changes the drawing destination for the dx functions.
    -- </summary>
    SetRenderTarget = function (target, clear)
      return SlipeMtaDefinitions.MtaClient.DxSetRenderTarget(target:getMaterialElement(), clear)
    end
    -- <summary>
    -- Reverts the current rendertarget to the screen
    -- </summary>
    RevertRenderTargetToScreen = function ()
      return SlipeMtaDefinitions.MtaClient.DxSetRenderTarget()
    end
    -- <summary>
    -- This function allows for the positioning of dxDraw calls to be automatically adjusted according to the client's aspect ratio setting. This lasts for a single execution of an event handler for one of the following events: onClientRender, onClientPreRender and onClientHUDRender. So the function has to be called every frame, just like dxDraws.
    -- </summary>
    SetAspectRatioAdjustmentEnabled = function (enabled, sourceRatio)
      return SlipeMtaDefinitions.MtaClient.DxSetAspectRatioAdjustmentEnabled(enabled, sourceRatio)
    end
    -- <summary>
    -- Get the World position from a screen position
    -- </summary>
    WorldFromScreenPosition = function (screenPosition, depth)
      local result = SlipeMtaDefinitions.MtaClient.GetWorldFromScreenPosition(screenPosition.X, screenPosition.Y, depth)
      return SystemNumerics.Vector3(result[1], result[2], result[3])
    end
    -- <summary>
    -- Get the screen position from a world position
    -- </summary>
    ScreenFromWorldPosition = function (worldPosition, edgeTolerance, relative)
      local result = SlipeMtaDefinitions.MtaClient.GetScreenFromWorldPosition(worldPosition.X, worldPosition.Y, worldPosition.Z, edgeTolerance, relative)
      return SystemNumerics.Vector2(result[1], result[2])
    end
    return {
      getFpsLimit = getFpsLimit,
      setFpsLimit = setFpsLimit,
      getScreenSize = getScreenSize,
      getBlendMode = getBlendMode,
      setBlendMode = setBlendMode,
      setTestMode = setTestMode,
      getStatus = getStatus,
      SetRenderTarget = SetRenderTarget,
      RevertRenderTargetToScreen = RevertRenderTargetToScreen,
      SetAspectRatioAdjustmentEnabled = SetAspectRatioAdjustmentEnabled,
      WorldFromScreenPosition = WorldFromScreenPosition,
      ScreenFromWorldPosition = ScreenFromWorldPosition,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "screenSize", 0x9, System.Numerics.Vector2 },
            { "status", 0x9, out.Slipe.Client.Rendering.Status }
          },
          properties = {
            { "BlendMode", 0x10E, System.Int32, getBlendMode, setBlendMode },
            { "FpsLimit", 0x10E, System.Int32, getFpsLimit, setFpsLimit },
            { "ScreenSize", 0x20E, System.Numerics.Vector2, getScreenSize },
            { "Status", 0x20E, out.Slipe.Client.Rendering.Status, getStatus },
            { "TestMode", 0x30E, System.Int32, setTestMode }
          },
          methods = {
            { "RevertRenderTargetToScreen", 0x8E, RevertRenderTargetToScreen, System.Boolean },
            { "ScreenFromWorldPosition", 0x38E, ScreenFromWorldPosition, System.Numerics.Vector3, System.Single, System.Boolean, System.Numerics.Vector2 },
            { "SetAspectRatioAdjustmentEnabled", 0x28E, SetAspectRatioAdjustmentEnabled, System.Boolean, System.Single, System.Boolean },
            { "SetRenderTarget", 0x28E, SetRenderTarget, out.Slipe.Client.Rendering.RenderTarget, System.Boolean, System.Boolean },
            { "WorldFromScreenPosition", 0x28E, WorldFromScreenPosition, System.Numerics.Vector2, System.Single, System.Numerics.Vector3 }
          },
          events = {
            { "OnRender", 0xE, System.Delegate(out.Slipe.Client.Elements.RootElement, out.Slipe.Client.Rendering.Events.OnRenderEventArgs, System.Void) },
            { "OnHudRender", 0xE, System.Delegate(out.Slipe.Client.Elements.RootElement, out.Slipe.Client.Rendering.Events.OnHudRenderEventArgs, System.Void) }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)

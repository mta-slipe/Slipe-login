-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientDx
local SlipeMtaDefinitions
local SlipeSharedElements
local SystemNumerics
System.import(function (out)
  SlipeClientDx = Slipe.Client.Dx
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SlipeSharedElements = Slipe.Shared.Elements
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Client.Dx", function (namespace)
  -- <summary>
  -- A shader is a graphical
  -- </summary>
  namespace.class("Shader", function (namespace)
    local SetValue, SetTessellation, SetTransform, SetTransform1, SetTransform2, Apply, Apply1, Remove, 
    Remove1, __ctor__
    -- <summary>
    -- Create a shader from file or raw data
    -- </summary>
    __ctor__ = function (this, filePathOrRaw, priority, maxDistance, layered, shaderElementType)
      SlipeClientDx.Material.__ctor__(this)
      local result = SlipeMtaDefinitions.MtaClient.DxCreateShader(filePathOrRaw, priority, maxDistance, layered, shaderElementType:ToEnumString(SlipeClientDx.ShaderElementType):ToLower())
      this.materialElement = result[1]
      this.TechniqueName = result[2]
    end
    -- <summary>
    -- Set a named parameter
    -- </summary>
    SetValue = function (this, parameterName, value)
      return SlipeMtaDefinitions.MtaClient.DxSetShaderValue(this.materialElement, parameterName, value)
    end
    -- <summary>
    -- Using tessellation allows a shader to manipulate the shape of the rendered image at each sub-division boundary.
    -- </summary>
    SetTessellation = function (this, tesselation)
      return SlipeMtaDefinitions.MtaClient.DxSetShaderTessellation(this.materialElement, System.ToInt32(tesselation.X), System.ToInt32(tesselation.Y))
    end
    -- <summary>
    -- This function applies a 3D transformation to a shader element when it is drawn with dxDrawImage.
    -- </summary>
    SetTransform = function (this, rotation, rotationCenterOffset, perspectiveCenterOffset, rotationCenterOffsetOriginIsScreen, perspectiveCenterOffsetOriginIsScren)
      return SlipeMtaDefinitions.MtaClient.DxSetShaderTransform(this.materialElement, rotation.X, rotation.Y, rotation.Z, rotationCenterOffset.X, rotationCenterOffset.Y, rotationCenterOffset.Z, rotationCenterOffsetOriginIsScreen, perspectiveCenterOffset.X, perspectiveCenterOffset.Y, perspectiveCenterOffsetOriginIsScren)
    end
    -- <summary>
    -- Set a 3D transformation without screen transform
    -- </summary>
    SetTransform1 = function (this, rotation, rotationCenterOffset, rotationCenterOffsetOriginIsScreen)
      return SetTransform(this, rotation:__clone__(), rotationCenterOffset:__clone__(), SystemNumerics.Vector2.getZero(), rotationCenterOffsetOriginIsScreen, false)
    end
    -- <summary>
    -- Set a 3D transformation without center offset
    -- </summary>
    SetTransform2 = function (this, rotation)
      return SetTransform1(this, rotation:__clone__(), SystemNumerics.Vector3.getZero(), false)
    end
    -- <summary>
    -- Applies shader to a specific element
    -- </summary>
    -- <param name="targetElement"></param>
    -- <param name="appendLayers"></param>
    -- <returns></returns>
    Apply = function (this, textureName, targetElement, appendLayers)
      return SlipeMtaDefinitions.MtaClient.EngineApplyShaderToWorldTexture(this.materialElement, textureName, targetElement:getMTAElement(), appendLayers)
    end
    -- <summary>
    -- Applies shader to all elements
    -- </summary>
    -- <param name="appendLayers"></param>
    -- <returns></returns>
    Apply1 = function (this, textureName, appendLayers)
      return Apply(this, textureName, SlipeSharedElements.Element.getRoot(), appendLayers)
    end
    -- <summary>
    -- Removes shader from a specific element
    -- </summary>
    -- <param name="targetElement"></param>
    -- <returns></returns>
    Remove = function (this, textureName, targetElement)
      return SlipeMtaDefinitions.MtaClient.EngineRemoveShaderFromWorldTexture(this.materialElement, textureName, targetElement:getMTAElement())
    end
    -- <summary>
    -- Removes shader from all elements
    -- </summary>
    -- <returns></returns>
    Remove1 = function (this, textureName)
      return Remove(this, textureName, SlipeSharedElements.Element.getRoot())
    end
    return {
      __inherits__ = function (out)
        return {
          out.Slipe.Client.Dx.Material
        }
      end,
      SetValue = SetValue,
      SetTessellation = SetTessellation,
      SetTransform = SetTransform,
      SetTransform1 = SetTransform1,
      SetTransform2 = SetTransform2,
      Apply = Apply,
      Apply1 = Apply1,
      Remove = Remove,
      Remove1 = Remove1,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "TechniqueName", 0x6, System.String }
          },
          methods = {
            { ".ctor", 0x506, nil, System.String, System.Single, System.Single, System.Boolean, System.Int32 },
            { "Apply", 0x386, Apply, System.String, out.Slipe.Shared.Elements.Element, System.Boolean, System.Boolean },
            { "Apply", 0x286, Apply1, System.String, System.Boolean, System.Boolean },
            { "Remove", 0x286, Remove, System.String, out.Slipe.Shared.Elements.Element, System.Boolean },
            { "Remove", 0x186, Remove1, System.String, System.Boolean },
            { "SetTessellation", 0x186, SetTessellation, System.Numerics.Vector2, System.Boolean },
            { "SetTransform", 0x586, SetTransform, System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector2, System.Boolean, System.Boolean, System.Boolean },
            { "SetTransform", 0x386, SetTransform1, System.Numerics.Vector3, System.Numerics.Vector3, System.Boolean, System.Boolean },
            { "SetTransform", 0x186, SetTransform2, System.Numerics.Vector3, System.Boolean },
            { "SetValue", 0x286, SetValue, System.String, System.Object, System.Boolean }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)

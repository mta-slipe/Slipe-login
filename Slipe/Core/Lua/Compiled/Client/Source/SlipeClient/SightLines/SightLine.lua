-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientDx
local SlipeClientRendering
local SlipeClientSightLines
local SlipeMtaDefinitions
local SystemNumerics
System.import(function (out)
  SlipeClientDx = Slipe.Client.Dx
  SlipeClientRendering = Slipe.Client.Rendering
  SlipeClientSightLines = Slipe.Client.SightLines
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Client.SightLines", function (namespace)
  -- <summary>
  -- Represents a line that can do raytracing operations
  -- </summary>
  namespace.class("SightLine", function (namespace)
    local getDebug, setDebug, getWaterCollisionPosition, getData, getIsClear, DebugDraw, __ctor1__, __ctor2__
    -- <summary>
    -- Creates a SightLine from a start and an end position
    -- </summary>
    __ctor1__ = function (this, startPos, endPos, checkBuildings, checkVehicles, checkPeds, checkWorldObjects, seeThroughStuff, ignoreSomeObjectsForCamera, shootThroughStuff, includeWorldModelInformation, includeCarTyreHits, ignoredElement)
      SlipeClientDx.Dx3DLine.__ctor__[2](this, startPos:__clone__(), endPos:__clone__())
      this.CheckBuildings = checkBuildings
      this.CheckVehicles = checkVehicles
      this.CheckPeds = checkPeds
      this.CheckWorldObjects = checkWorldObjects
      this.SeeThroughStuff = seeThroughStuff
      this.IgnoreSomeObjectsForCamera = ignoreSomeObjectsForCamera
      this.ShootThroughStuff = shootThroughStuff
      this.IncludeWorldModelInformation = includeWorldModelInformation
      this.IncludeCarTyreHits = includeCarTyreHits
      this.IgnoredElement = ignoredElement
    end
    -- <summary>
    -- Create a SightLine attached to a certain object
    -- </summary>
    __ctor2__ = function (this, attachedTo, relativeEndPos, offset, checkBuildings, checkVehicles, checkPeds, checkWorldObjects, seeThroughStuff, ignoreSomeObjectsForCamera, shootThroughStuff, includeWorldModelInformation, includeCarTyreHits, ignoredElement)
      SlipeClientDx.Dx3DLine.__ctor__[3](this, attachedTo, relativeEndPos:__clone__(), offset:__clone__())
      this.CheckBuildings = checkBuildings
      this.CheckVehicles = checkVehicles
      this.CheckPeds = checkPeds
      this.CheckWorldObjects = checkWorldObjects
      this.SeeThroughStuff = seeThroughStuff
      this.IgnoreSomeObjectsForCamera = ignoreSomeObjectsForCamera
      this.ShootThroughStuff = shootThroughStuff
      this.IncludeWorldModelInformation = includeWorldModelInformation
      this.IncludeCarTyreHits = includeCarTyreHits
      this.IgnoredElement = ignoredElement
    end
    getDebug = function (this)
      return this.Visible
    end
    setDebug = function (this, value)
      if value then
        SlipeClientRendering.Renderer.OnRender = SlipeClientRendering.Renderer.OnRender + System.fn(this, DebugDraw)
      else
        SlipeClientRendering.Renderer.OnRender = SlipeClientRendering.Renderer.OnRender - System.fn(this, DebugDraw)
      end
      this.Visible = value
    end
    getWaterCollisionPosition = function (this)
      local result = SlipeMtaDefinitions.MtaClient.TestLineAgainstWater(this:getStartPosition().X, this:getStartPosition().Y, this:getStartPosition().Z, this:getEndPosition().X, this:getEndPosition().Y, this:getEndPosition().Z)
      if not result[1] then
        System.throw(System.Exception("SightLine did not collide with water"))
      end

      return SystemNumerics.Vector3(result[2], result[3], result[4])
    end
    getData = function (this)
      local default = this.IgnoredElement
      if default ~= nil then
        default = default:getMTAElement()
      end
      return SlipeClientSightLines.SightLineData(SlipeMtaDefinitions.MtaClient.ProcessLineOfSight(this:getStartPosition().X, this:getStartPosition().Y, this:getStartPosition().Z, this:getEndPosition().X, this:getEndPosition().Y, this:getEndPosition().Z, this.CheckBuildings, this.CheckVehicles, this.CheckPeds, this.CheckWorldObjects, false, this.SeeThroughStuff, this.IgnoreSomeObjectsForCamera, this.ShootThroughStuff, default, this.IncludeWorldModelInformation, this.IncludeCarTyreHits))
    end
    getIsClear = function (this)
      local default = this.IgnoredElement
      if default ~= nil then
        default = default:getMTAElement()
      end
      return SlipeMtaDefinitions.MtaClient.IsLineOfSightClear(this:getStartPosition().X, this:getStartPosition().Y, this:getStartPosition().Z, this:getEndPosition().X, this:getEndPosition().Y, this:getEndPosition().Z, this.CheckBuildings, this.CheckVehicles, this.CheckPeds, this.CheckWorldObjects, false, this.SeeThroughStuff, this.IgnoreSomeObjectsForCamera, default)
    end
    DebugDraw = function (this, source, eventArgs)
      this:Draw(source, eventArgs)
    end
    return {
      __inherits__ = function (out)
        return {
          out.Slipe.Client.Dx.Dx3DLine
        }
      end,
      CheckBuildings = false,
      CheckVehicles = false,
      CheckPeds = false,
      CheckWorldObjects = false,
      SeeThroughStuff = false,
      IgnoreSomeObjectsForCamera = false,
      ShootThroughStuff = false,
      IncludeWorldModelInformation = false,
      IncludeCarTyreHits = false,
      getDebug = getDebug,
      setDebug = setDebug,
      getWaterCollisionPosition = getWaterCollisionPosition,
      getData = getData,
      getIsClear = getIsClear,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          properties = {
            { "CheckBuildings", 0x6, System.Boolean },
            { "CheckPeds", 0x6, System.Boolean },
            { "CheckVehicles", 0x6, System.Boolean },
            { "CheckWorldObjects", 0x6, System.Boolean },
            { "Data", 0x206, out.Slipe.Client.SightLines.SightLineData, getData },
            { "Debug", 0x106, System.Boolean, getDebug, setDebug },
            { "IgnoredElement", 0x6, out.Slipe.Shared.Elements.PhysicalElement },
            { "IgnoreSomeObjectsForCamera", 0x6, System.Boolean },
            { "IncludeCarTyreHits", 0x6, System.Boolean },
            { "IncludeWorldModelInformation", 0x6, System.Boolean },
            { "IsClear", 0x206, System.Boolean, getIsClear },
            { "SeeThroughStuff", 0x6, System.Boolean },
            { "ShootThroughStuff", 0x6, System.Boolean },
            { "WaterCollisionPosition", 0x206, System.Numerics.Vector3, getWaterCollisionPosition }
          },
          methods = {
            { ".ctor", 0xC06, __ctor1__, System.Numerics.Vector3, System.Numerics.Vector3, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, out.Slipe.Shared.Elements.PhysicalElement },
            { ".ctor", 0xD06, __ctor2__, out.Slipe.Shared.Elements.PhysicalElement, System.Numerics.Vector3, System.Numerics.Matrix4x4, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, out.Slipe.Shared.Elements.PhysicalElement },
            { "DebugDraw", 0x201, DebugDraw, out.Slipe.Client.Elements.RootElement, out.Slipe.Client.Rendering.Events.OnRenderEventArgs }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)

-- Generated by CSharp.lua Compiler
local System = System
local SlipeClientRendering
local SlipeMtaDefinitions
local SystemNumerics
System.import(function (out)
  SlipeClientRendering = Slipe.Client.Rendering
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Client.IO", function (namespace)
  -- <summary>
  -- Class representing the cursor of the local player
  -- </summary>
  namespace.class("Cursor", function (namespace)
    local getRelativePosition, getPosition, setPosition, getWorldPosition, getAlpha, setAlpha, getType, getVisible, 
    SetVisible
    getRelativePosition = function ()
      local r = SlipeMtaDefinitions.MtaClient.GetCursorPosition()
      return SystemNumerics.Vector2(r[1], r[2])
    end
    getPosition = function ()
      local r = SlipeMtaDefinitions.MtaClient.GetCursorPosition()

      return SystemNumerics.Vector2(r[1] * SlipeClientRendering.Renderer.getScreenSize().X, r[2] * SlipeClientRendering.Renderer.getScreenSize().Y)
    end
    setPosition = function (value)
      SlipeMtaDefinitions.MtaClient.SetCursorPosition(System.ToInt32(value.X), System.ToInt32(value.Y))
    end
    getWorldPosition = function ()
      local r = SlipeMtaDefinitions.MtaClient.GetCursorPosition()
      return SystemNumerics.Vector3(r[3], r[4], r[5])
    end
    getAlpha = function ()
      return SlipeMtaDefinitions.MtaClient.GetCursorAlpha()
    end
    setAlpha = function (value)
      SlipeMtaDefinitions.MtaClient.SetCursorAlpha(value)
    end
    getType = function ()
      return SlipeMtaDefinitions.MtaClient.GuiGetCursorType()
    end
    getVisible = function ()
      return SlipeMtaDefinitions.MtaClient.IsCursorShowing()
    end
    -- <summary>
    -- Set the visibility and whether or not controls should be disabled
    -- </summary>
    SetVisible = function (visible, toggleControls)
      return SlipeMtaDefinitions.MtaClient.ShowCursor(visible, toggleControls)
    end
    return {
      getRelativePosition = getRelativePosition,
      getPosition = getPosition,
      setPosition = setPosition,
      getWorldPosition = getWorldPosition,
      getAlpha = getAlpha,
      setAlpha = setAlpha,
      getType = getType,
      getVisible = getVisible,
      SetVisible = SetVisible,
      __metadata__ = function (out)
        return {
          properties = {
            { "Alpha", 0x10E, System.Int32, getAlpha, setAlpha },
            { "Position", 0x10E, System.Numerics.Vector2, getPosition, setPosition },
            { "RelativePosition", 0x20E, System.Numerics.Vector2, getRelativePosition },
            { "Type", 0x20E, System.String, getType },
            { "Visible", 0x20E, System.Boolean, getVisible },
            { "WorldPosition", 0x20E, System.Numerics.Vector3, getWorldPosition }
          },
          methods = {
            { "SetVisible", 0x28E, SetVisible, System.Boolean, System.Boolean, System.Boolean }
          },
          events = {
            { "OnClick", 0xE, System.Delegate(out.Slipe.Client.Elements.RootElement, out.Slipe.Client.IO.Events.OnClickEventArgs, System.Void) },
            { "OnDoubleClick", 0xE, System.Delegate(out.Slipe.Client.Elements.RootElement, out.Slipe.Client.IO.Events.OnDoubleClickEventArgs, System.Void) },
            { "OnMove", 0xE, System.Delegate(out.Slipe.Client.Elements.RootElement, out.Slipe.Client.IO.Events.OnMoveEventArgs, System.Void) }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)

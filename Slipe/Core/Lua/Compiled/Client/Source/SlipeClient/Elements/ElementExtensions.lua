-- Generated by CSharp.lua Compiler
local System = System
local SlipeMtaDefinitions
local SystemNumerics
System.import(function (out)
  SlipeMtaDefinitions = Slipe.MtaDefinitions
  SystemNumerics = System.Numerics
end)
System.namespace("Slipe.Client.Elements", function (namespace)
  -- <summary>
  -- Extensions for clientsided elements
  -- </summary>
  namespace.class("ElementExtensions", function (namespace)
    local GetBoundingBox, GetDistanceFromCentreOfMassToBaseOfModel, GetRadius, SetCollidableWith, IsCollidableWith, IsLocal, IsOnScreen, SetStreamable, 
    IsStreamable, IsStreamedIn, IsSyncer, IsWaitingForGroundToLoad
    -- <summary>
    -- This function returns the minimum and maximum relative coordinates of an element's bounding box.
    -- </summary>
    GetBoundingBox = function (e)
      local result = SlipeMtaDefinitions.MtaClient.GetElementBoundingBox(e:getMTAElement())
      local min = SystemNumerics.Vector3(result[1], result[2], result[3])
      local max = SystemNumerics.Vector3(result[4], result[5], result[6])
      return System.tuple(min, max)
    end
    -- <summary>
    -- his function is used to retrieve the distance between a element's centre of mass to the base of the model. This can be used to calculate the position the element has to be set to, to have it on ground level.
    -- </summary>
    GetDistanceFromCentreOfMassToBaseOfModel = function (e)
      return SlipeMtaDefinitions.MtaClient.GetElementDistanceFromCentreOfMassToBaseOfModel(e:getMTAElement())
    end
    -- <summary>
    -- his function gets the radius of an element. Normally, sphere or circle-shaped elements tend to return a more accurate and expected radius than others with another shapes.
    -- </summary>
    GetRadius = function (e)
      return SlipeMtaDefinitions.MtaClient.GetElementRadius(e:getMTAElement())
    end
    -- <summary>
    -- This function can be used to set an element to collide with another element. An element with collisions disabled does not interact physically with the other element.
    -- </summary>
    SetCollidableWith = function (e, collideWith, enabled)
      return SlipeMtaDefinitions.MtaClient.SetElementCollidableWith(e:getMTAElement(), collideWith:getMTAElement(), enabled)
    end
    -- <summary>
    -- This function can be used to check whether specified element is collidable with another element.
    -- </summary>
    IsCollidableWith = function (e, collideWith)
      return SlipeMtaDefinitions.MtaClient.IsElementCollidableWith(e:getMTAElement(), collideWith:getMTAElement())
    end
    -- <summary>
    -- This function checks whether this element is local to the client (doesn't exist in the server) or not.
    -- </summary>
    IsLocal = function (e)
      return SlipeMtaDefinitions.MtaClient.IsElementLocal(e:getMTAElement())
    end
    -- <summary>
    -- This function will check if this element is on the screen. Elements behind objects but still in the camera view count as being on screen.
    -- </summary>
    IsOnScreen = function (e)
      return SlipeMtaDefinitions.MtaClient.IsElementOnScreen(e:getMTAElement())
    end
    -- <summary>
    -- This function can be used to disable streaming for this element. This will make sure the element is not virtualized (streamed out from GTA) when the player moves far away from it.
    -- </summary>
    SetStreamable = function (e, enabled)
      return SlipeMtaDefinitions.MtaClient.SetElementStreamable(e:getMTAElement(), enabled)
    end
    -- <summary>
    -- Check if this element is streamable
    -- </summary>
    IsStreamable = function (e)
      return SlipeMtaDefinitions.MtaClient.IsElementStreamable(e:getMTAElement())
    end
    -- <summary>
    -- This function checks whether this element is currently streamed in (not virtualized) and are actual GTA objects in the world.
    -- </summary>
    IsStreamedIn = function (e)
      return SlipeMtaDefinitions.MtaClient.IsElementStreamedIn(e:getMTAElement())
    end
    -- <summary>
    -- This function checks whether this element is synced by the local player or not.
    -- </summary>
    IsSyncer = function (e)
      return SlipeMtaDefinitions.MtaClient.IsElementSyncer(e:getMTAElement())
    end
    -- <summary>
    -- This function checks whether MTA has frozen an element because it is above map objects which are still loading or not.
    -- </summary>
    IsWaitingForGroundToLoad = function (e)
      return SlipeMtaDefinitions.MtaClient.IsElementWaitingForGroundToLoad(e:getMTAElement())
    end
    return {
      GetBoundingBox = GetBoundingBox,
      GetDistanceFromCentreOfMassToBaseOfModel = GetDistanceFromCentreOfMassToBaseOfModel,
      GetRadius = GetRadius,
      SetCollidableWith = SetCollidableWith,
      IsCollidableWith = IsCollidableWith,
      IsLocal = IsLocal,
      IsOnScreen = IsOnScreen,
      SetStreamable = SetStreamable,
      IsStreamable = IsStreamable,
      IsStreamedIn = IsStreamedIn,
      IsSyncer = IsSyncer,
      IsWaitingForGroundToLoad = IsWaitingForGroundToLoad,
      __metadata__ = function (out)
        return {
          methods = {
            { "GetBoundingBox", 0x18E, GetBoundingBox, out.Slipe.Shared.Elements.PhysicalElement, System.Tuple },
            { "GetDistanceFromCentreOfMassToBaseOfModel", 0x18E, GetDistanceFromCentreOfMassToBaseOfModel, out.Slipe.Shared.Elements.PhysicalElement, System.Single },
            { "GetRadius", 0x18E, GetRadius, out.Slipe.Shared.Elements.PhysicalElement, System.Single },
            { "IsCollidableWith", 0x28E, IsCollidableWith, out.Slipe.Shared.Elements.PhysicalElement, out.Slipe.Shared.Elements.PhysicalElement, System.Boolean },
            { "IsLocal", 0x18E, IsLocal, out.Slipe.Shared.Elements.PhysicalElement, System.Boolean },
            { "IsOnScreen", 0x18E, IsOnScreen, out.Slipe.Shared.Elements.PhysicalElement, System.Boolean },
            { "IsStreamable", 0x18E, IsStreamable, out.Slipe.Shared.Elements.PhysicalElement, System.Boolean },
            { "IsStreamedIn", 0x18E, IsStreamedIn, out.Slipe.Shared.Elements.PhysicalElement, System.Boolean },
            { "IsSyncer", 0x18E, IsSyncer, out.Slipe.Shared.Elements.PhysicalElement, System.Boolean },
            { "IsWaitingForGroundToLoad", 0x18E, IsWaitingForGroundToLoad, out.Slipe.Shared.Elements.PhysicalElement, System.Boolean },
            { "SetCollidableWith", 0x38E, SetCollidableWith, out.Slipe.Shared.Elements.PhysicalElement, out.Slipe.Shared.Elements.PhysicalElement, System.Boolean, System.Boolean },
            { "SetStreamable", 0x28E, SetStreamable, out.Slipe.Shared.Elements.PhysicalElement, System.Boolean, System.Boolean }
          },
          class = { 0xE }
        }
      end
    }
  end)
end)
